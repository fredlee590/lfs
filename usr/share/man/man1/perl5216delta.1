.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5216DELTA 1"
.TH PERL5216DELTA 1 "2015-05-13" "perl v5.22.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5216delta \- what is new for perl v5.21.6
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.21.5 release and the 5.21.6
release.
.PP
If you are upgrading from an earlier release such as 5.21.4, first read
perl5215delta, which describes differences between 5.21.4 and 5.21.5.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "List form of pipe open implemented for Win32"
.IX Subsection "List form of pipe open implemented for Win32"
The list form of pipe:
.PP
.Vb 1
\&  open my $fh, "\-|", "program", @arguments;
.Ve
.PP
is now implemented on Win32.  It has the same limitations as \f(CW\*(C`system
LIST\*(C'\fR on Win32, since the Win32 \s-1API\s0 doesn't accept program arguments
as a list.
.SS "Assignment to list repetition"
.IX Subsection "Assignment to list repetition"
\&\f(CW\*(C`(...) x ...\*(C'\fR can now be used within a list that is assigned to, as long
as the left-hand side is a valid lvalue.  This allows \f(CW\*(C`(undef,undef,$foo)
= that_function()\*(C'\fR to be written as \f(CW\*(C`((undef)x2, $foo) = that_function()\*(C'\fR.
.ie n .SS """close"" now sets $!"
.el .SS "\f(CWclose\fP now sets \f(CW$!\fP"
.IX Subsection "close now sets $!"
When an I/O error occurs, the fact that there has been an error is recorded
in the handle.  \f(CW\*(C`close\*(C'\fR returns false for such a handle.  Previously, the
value of \f(CW$!\fR would be untouched by \f(CW\*(C`close\*(C'\fR, so the common convention of
writing \f(CW\*(C`close $fh or die $!\*(C'\fR did not work reliably.  Now the handle
records the value of \f(CW$!\fR, too, and \f(CW\*(C`close\*(C'\fR restores it.
.SH "Deprecations"
.IX Header "Deprecations"
.SS "Use of non-graphic characters in single-character variable names"
.IX Subsection "Use of non-graphic characters in single-character variable names"
The syntax for single-character variable names is more lenient than
for longer variable names, allowing the one-character name to be a
punctuation character or even invisible (a non-graphic).  Perl v5.20
deprecated the ASCII-range controls as such a name.  Now, all
non-graphic characters that formerly were allowed are deprecated.
The practical effect of this occurs only when not under \f(CW"use\ utf8"\fR, and affects just the C1 controls (code points 0x80 through
0xFF), NO-BREAK \s-1SPACE,\s0 and \s-1SOFT HYPHEN.\s0
.ie n .SS "Inlining of ""sub () { $var }"" with observable side-effects"
.el .SS "Inlining of \f(CWsub () { $var }\fP with observable side-effects"
.IX Subsection "Inlining of sub () { $var } with observable side-effects"
In many cases Perl makes sub () { \f(CW$var\fR } into an inlinable constant
subroutine, capturing the value of \f(CW$var\fR at the time the \f(CW\*(C`sub\*(C'\fR expression
is evaluated.  This can break the closure behaviour in those cases where
\&\f(CW$var\fR is subsequently modified.  The subroutine won't return the new value.
.PP
This usage is now deprecated in those cases where the variable could be
modified elsewhere.  Perl detects those cases and emits a deprecation
warning.  Such code will likely change in the future and stop producing a
constant.
.PP
If your variable is only modified in the place where it is declared, then
Perl will continue to make the sub inlinable with no warnings.
.PP
.Vb 4
\&    sub make_constant {
\&        my $var = shift;
\&        return sub () { $var }; # fine
\&    }
\&
\&    sub make_constant_deprecated {
\&        my $var;
\&        $var = shift;
\&        return sub () { $var }; # deprecated
\&    }
\&
\&    sub make_constant_deprecated2 {
\&        my $var = shift;
\&        log_that_value($var); # could modify $var
\&        return sub () { $var }; # deprecated
\&    }
.Ve
.PP
In the second example above, detecting that \f(CW$var\fR is assigned to only once
is too hard to detect.  That it happens in a spot other than the \f(CW\*(C`my\*(C'\fR
declaration is enough for Perl to find it suspicious.
.PP
This deprecation warning happens only for a simple variable for the body of
the sub.  (A \f(CW\*(C`BEGIN\*(C'\fR block or \f(CW\*(C`use\*(C'\fR statement inside the sub is ignored,
because it does not become part of the sub's body.)  For more complex
cases, such as \f(CW\*(C`sub () { do_something() if 0; $var }\*(C'\fR the behaviour has
changed such that inlining does not happen if the variable is modifiable
elsewhere.  Such cases should be rare.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
\&\f(CW\*(C`(...)x1\*(C'\fR, \f(CW\*(C`("constant")x0\*(C'\fR and \f(CW\*(C`($scalar)x0\*(C'\fR are now optimised in list
context.  If the right-hand argument is a constant 1, the repetition
operator disappears.  If the right-hand argument is a constant 0, the whole
expressions is optimised to the empty list, so long as the left-hand
argument is a simple scalar or constant.  \f(CW\*(C`(foo())x0\*(C'\fR is not optimised.
.IP "\(bu" 4
\&\f(CW\*(C`substr\*(C'\fR assignment is now optimised into 4\-argument \f(CW\*(C`substr\*(C'\fR at the end
of a subroutine (or as the argument to \f(CW\*(C`return\*(C'\fR).  Previously, this
optimisation only happened in void context.
.IP "\(bu" 4
Assignment to lexical variables is often optimised away.  For instance, in
\&\f(CW\*(C`$lexical = chr $foo\*(C'\fR, the \f(CW\*(C`chr\*(C'\fR operator writes directly to the lexical
variable instead of returning a value that gets copied.  This optimisation
has been extended to \f(CW\*(C`split\*(C'\fR, \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`vec\*(C'\fR on the right-hand side.  It
has also been made to work with state variable initialization.
.IP "\(bu" 4
In \*(L"\eL...\*(R", \*(L"\eQ...\*(R", etc., the extra \*(L"stringify\*(R" op is now optimised away,
making these just as fast as \f(CW\*(C`lcfirst\*(C'\fR, \f(CW\*(C`quotemeta\*(C'\fR, etc.
.IP "\(bu" 4
Assignment to an empty list is now sometimes faster.  In particular, it
never calls \f(CW\*(C`FETCH\*(C'\fR on tied arguments on the right-hand side, whereas it
used to sometimes.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
B has been upgraded from version 1.52 to 1.53.
.IP "\(bu" 4
B::Concise has been upgraded from version 0.994 to 0.995.
.IP "\(bu" 4
B::Deparse has been upgraded from version 1.29 to 1.30.
.Sp
It now deparses \f(CW\*(C`+sub : attr { ... }\*(C'\fR correctly at the start of a
statement.  Without the initial \f(CW\*(C`+\*(C'\fR, \f(CW\*(C`sub\*(C'\fR would be a statement label.
.Sp
\&\f(CW\*(C`BEGIN\*(C'\fR blocks are now emitted in the right place most of the time, but
the change unfortunately introduced a regression, in that \f(CW\*(C`BEGIN\*(C'\fR blocks
occurring just before the end of the enclosing block may appear below it
instead.  So this change may need to be reverted if it cannot be fixed
before Perl 5.22.  [perl #77452]
.Sp
B::Deparse no longer puts erroneous \f(CW\*(C`local\*(C'\fR here and there, such as for
\&\f(CW\*(C`LIST = tr/a//d\*(C'\fR.  [perl #119815]
.Sp
Adjacent \f(CW\*(C`use\*(C'\fR statements are no longer accidentally nested if one
contains a \f(CW\*(C`do\*(C'\fR block.  [perl #115066]
.IP "\(bu" 4
B::Op_private has been upgraded from version 5.021005 to 5.021006.
.Sp
It now includes a hash named \f(CW%ops_using\fR, list all op types that use a
particular private flag.
.IP "\(bu" 4
CPAN::Meta has been upgraded from version 2.142690 to 2.143240.
.IP "\(bu" 4
CPAN::Meta::Requirements has been upgraded from version 2.128 to 2.130.
.IP "\(bu" 4
Devel::Peek has been upgraded from version 1.18 to 1.19.
.IP "\(bu" 4
Digest::SHA has been upgraded from version 5.92 to 5.93.
.IP "\(bu" 4
DynaLoader has been upgraded from version 1.27 to 1.28.
.IP "\(bu" 4
Encode has been upgraded from version 2.62 to 2.64.
.IP "\(bu" 4
experimental has been upgraded from version 0.012 to 0.013.
.IP "\(bu" 4
Exporter has been upgraded from version 5.71 to 5.72.
.IP "\(bu" 4
ExtUtils::MakeMaker has been upgraded from version 6.98 to 7.02.
.IP "\(bu" 4
ExtUtils::Manifest has been upgraded from version 1.68 to 1.69.
.IP "\(bu" 4
ExtUtils::ParseXS has been upgraded from version 3.25 to 3.26.
.IP "\(bu" 4
HTTP::Tiny has been upgraded from version 0.050 to 0.051.
.IP "\(bu" 4
I18N::Langinfo has been upgraded from version 0.11 to 0.12.
.IP "\(bu" 4
IO::Socket has been upgraded from version 1.37 to 1.38.
.Sp
Document the limitations of the \fIconnected()\fR method.  [perl #123096]
.IP "\(bu" 4
locale has been upgraded from version 1.04 to 1.05.
.IP "\(bu" 4
Module::CoreList has been upgraded from version 5.20141020 to 5.20141120.
.IP "\(bu" 4
overload has been upgraded from version 1.23 to 1.24.
.IP "\(bu" 4
PerlIO::encoding has been upgraded from version 0.19 to 0.20.
.IP "\(bu" 4
PerlIO::scalar has been upgraded from version 0.19 to 0.20.
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from version 1.45 to 1.46.
.IP "\(bu" 4
re has been upgraded from version 0.27 to 0.28.
.IP "\(bu" 4
Test::Harness has been upgraded from version 3.33 to 3.34.
.IP "\(bu" 4
Test::Simple has been upgraded from version 1.001008 to 1.301001_075.
.IP "\(bu" 4
Unicode::UCD has been upgraded from version 0.58 to 0.59.
.IP "\(bu" 4
warnings has been upgraded from version 1.28 to 1.29.
.IP "\(bu" 4
XSLoader has been upgraded from version 0.18 to 0.19.
.SH "Documentation"
.IX Header "Documentation"
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fI\*(L"Identifier parsing\*(R" in perldata\fR
.IX Subsection "Identifier parsing in perldata"
.IP "\(bu" 4
The syntax of single-character variable names has been brought
up-to-date and more fully explained.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Warnings\fR
.IX Subsection "New Warnings"
.IP "\(bu" 4
Use of literal non-graphic characters in variable names is deprecated
.IP "\(bu" 4
A new \f(CW\*(C`locale\*(C'\fR warning category has been created, with the following warning
messages currently in it:
.RS 4
.IP "\(bu" 4
Locale '%s' may not work well.%s
.IP "\(bu" 4
Can't do %s(\*(L"%s\*(R") on non\-UTF\-8 locale; resolved to \*(L"%s\*(R".
.RE
.RS 4
.RE
.IP "\(bu" 4
Warning: unable to close filehandle \f(CW%s\fR properly: \f(CW%s\fR
.IP "\(bu" 4
The following two warnings for \f(CW\*(C`tr///\*(C'\fR used to be skipped if the
transliteration contained wide characters, but now they occur regardless of
whether there are wide characters or not:
.Sp
Useless use of /d modifier in transliteration operator
.Sp
Replacement list is longer than search list
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP "\(bu" 4
Quantifier unexpected on zero-length expression in regex m/%s/.
.Sp
This message has had the \*(L"<\-\-\ \s-1HERE\*(R"\s0 marker removed, as it was always
placed at the end of the regular expression, regardless of where the
problem actually occurred.  [perl #122680]
.IP "\(bu" 4
Setting $/ to a reference to \f(CW%s\fR as a form of slurp is deprecated, treating as undef
.Sp
This warning is now a default warning, like other deprecation warnings.
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
\&\fIConfigure\fR with \f(CW\*(C`\-Dmksymlinks\*(C'\fR should now be faster. [perl #122002]
.IP "\(bu" 4
As well as the gzip and bzip2 tarballs, this release has been made available as an xz utils compressed tarball.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
\fIWin32\fR
.IX Subsection "Win32"
.IP "\(bu" 4
In the experimental \f(CW\*(C`:win32\*(C'\fR layer, a crash in \f(CW\*(C`open\*(C'\fR was fixed. Also
opening \f(CW\*(C`/dev/null\*(C'\fR, which works the Win32 Perl's normal \f(CW\*(C`:unix\*(C'\fR layer, was
implemented for \f(CW\*(C`:win32\*(C'\fR.
[perl #122224] <https://rt.perl.org/Ticket/Display.html?id=122224>
.IP "\(bu" 4
A new makefile option, \f(CW\*(C`USE_LONG_DOUBLE\*(C'\fR, has been added to the Windows
dmake makefile for gcc builds only.  Set this to \*(L"define\*(R" if you want perl to
use long doubles to give more accuracy and range for floating point numbers.
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP "\(bu" 4
\&\f(CW\*(C`screaminstr\*(C'\fR has been removed. Although marked as public \s-1API,\s0 it is
undocumented and has no usage in modern perl versions on \s-1CPAN\s0 Grep. Calling it
has been fatal since 5.17.0.
.IP "\(bu" 4
\&\f(CW\*(C`newDEFSVOP\*(C'\fR, \f(CW\*(C`block_start\*(C'\fR, \f(CW\*(C`block_end\*(C'\fR and \f(CW\*(C`intro_my\*(C'\fR have been added
to the \s-1API.\s0
.IP "\(bu" 4
The internal \f(CW\*(C`convert\*(C'\fR function in \fIop.c\fR has been renamed
\&\f(CW\*(C`op_convert_list\*(C'\fR and added to the \s-1API.\s0
.IP "\(bu" 4
\&\f(CW\*(C`sv_magic\*(C'\fR no longer forbids \*(L"ext\*(R" magic on read-only values.  After all,
perl can't know whether the custom magic will modify the \s-1SV\s0 or not.
[perl #123103]
.IP "\(bu" 4
Starting in 5.21.6, accessing \*(L"CvPADLIST\*(R" in perlapi in an \s-1XSUB\s0 is forbidden.
CvPADLIST has be reused for a different internal purpose for XSUBs. Guard all
CvPADLIST expressions with \f(CW\*(C`CvISXSUB()\*(C'\fR if your code doesn't already block
\&\s-1XSUB\s0 CV*s from going through optree CV* expecting code.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
\&\fIfchmod()\fR and \fIfutimes()\fR now set \f(CW$!\fR when they fail due to being
passed a closed file handle.  [perl #122703]
.IP "\(bu" 4
Perl now comes with a corrected Unicode 7.0 for the erratum issued on
October 21, 2014 (see <http://www.unicode.org/errata/#current_errata>),
dealing with glyph shaping in Arabic.
.IP "\(bu" 4
\&\fIop_free()\fR no longer crashes due to a stack overflow when freeing a
deeply recursive op tree. [perl #108276]
.IP "\(bu" 4
\&\fIscalarvoid()\fR would crash due to a stack overflow when processing a
deeply recursive op tree. [perl #108276]
.IP "\(bu" 4
In Perl 5.20.0, \f(CW$^N\fR accidentally had the internal \s-1UTF8\s0 flag turned off
if accessed from a code block within a regular expression, effectively
UTF8\-encoding the value.  This has been fixed.  [perl #123135]
.IP "\(bu" 4
A failed \f(CW\*(C`semctl\*(C'\fR call no longer overwrites existing items on the stack,
causing \f(CW\*(C`(semctl(\-1,0,0,0))[0]\*(C'\fR to give an \*(L"uninitialized\*(R" warning.
.IP "\(bu" 4
\&\f(CW\*(C`else{foo()}\*(C'\fR with no space before \f(CW\*(C`foo\*(C'\fR is now better at assigning the
right line number to that statement.  [perl #122695]
.IP "\(bu" 4
Sometimes the assignment in \f(CW\*(C`@array = split\*(C'\fR gets optimised and \f(CW\*(C`split\*(C'\fR
itself writes directly to the array.  This caused a bug, preventing this
assignment from being used in lvalue context.  So
\&\f(CW\*(C`(@a=split//,"foo")=bar()\*(C'\fR was an error.  (This bug probably goes back to
Perl 3, when the optimisation was added.)  This optimisation, and the bug,
started to happen in more cases in 5.21.5.  It has now been fixed.
[perl #123057]
.IP "\(bu" 4
When argument lists that fail the checks installed by subroutine
signatures, the resulting error messages now give the file and line number
of the caller, not of the called subroutine.  [perl #121374]
.IP "\(bu" 4
Flip-flop operators (\f(CW\*(C`..\*(C'\fR and \f(CW\*(C`...\*(C'\fR in scalar context) used to maintain
a separate state for each recursion level (the number of times the
enclosing sub was called recursively), contrary to the documentation.  Now
each closure has one internal state for each flip-flop.  [perl #122829]
.IP "\(bu" 4
\&\f(CW\*(C`use\*(C'\fR, \f(CW\*(C`no\*(C'\fR, statement labels, special blocks (\f(CW\*(C`BEGIN\*(C'\fR) and pod are now
permitted as the first thing in a \f(CW\*(C`map\*(C'\fR or \f(CW\*(C`grep\*(C'\fR block, the block after
\&\f(CW\*(C`print\*(C'\fR or \f(CW\*(C`say\*(C'\fR (or other functions) returning a handle, and within
\&\f(CW\*(C`${...}\*(C'\fR, \f(CW\*(C`@{...}\*(C'\fR, etc.  [perl #122782]
.IP "\(bu" 4
The repetition operator \f(CW\*(C`x\*(C'\fR now propagates lvalue context to its left-hand
argument when used in contexts like \f(CW\*(C`foreach\*(C'\fR.  That allows
\&\f(CW\*(C`for(($#that_array)x2) { ... }\*(C'\fR to work as expected if the loop modifies
\&\f(CW$_\fR.
.IP "\(bu" 4
\&\f(CW\*(C`(...) x ...\*(C'\fR in scalar context used to corrupt the stack if one operand
were an object with \*(L"x\*(R" overloading, causing erratic behaviour.
[perl #121827]
.IP "\(bu" 4
Assignment to a lexical scalar is often optimised away (as mentioned under
\&\*(L"Performance Enhancements\*(R").  Various bugs related to this optimisation
have been fixed.  Certain operators on the right-hand side would sometimes
fail to assign the value at all or assign the wrong value, or would call
\&\s-1STORE\s0 twice or not at all on tied variables.  The operators affected were
\&\f(CW\*(C`$foo++\*(C'\fR, \f(CW\*(C`$foo\-\-\*(C'\fR, and \f(CW\*(C`\-$foo\*(C'\fR under \f(CW\*(C`use integer\*(C'\fR, \f(CW\*(C`chomp\*(C'\fR, \f(CW\*(C`chr\*(C'\fR
and \f(CW\*(C`setpgrp\*(C'\fR.
.IP "\(bu" 4
List assignments were sometimes buggy if the same scalar ended up on both
sides of the assignment due to used of \f(CW\*(C`tied\*(C'\fR, \f(CW\*(C`values\*(C'\fR or \f(CW\*(C`each\*(C'\fR.  The
result would be the wrong value getting assigned.
.IP "\(bu" 4
\&\f(CW\*(C`setpgrp($nonzero)\*(C'\fR (with one argument) was accidentally changed in 5.16
to mean \f(CWsetpgrp(0)\fR.  This has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`_\|_SUB_\|_\*(C'\fR could return the wrong value or even corrupt memory under the
debugger (the \fB\-d\fR switch) and in subs containing \f(CW\*(C`eval $string\*(C'\fR.
.IP "\(bu" 4
When \f(CW\*(C`sub () { $var }\*(C'\fR becomes inlinable, it now returns a different
scalar each time, just as a non-inlinable sub would, though Perl still
optimises the copy away in cases where it would make no observable
difference.
.IP "\(bu" 4
\&\f(CW\*(C`my sub f () { $var }\*(C'\fR and \f(CW\*(C`sub () : attr { $var }\*(C'\fR are no longer
eligible for inlining.  The former would crash; the latter would just
throw the attributes away.  An exception is made for the little-known
\&\*(L":method\*(R" attribute, which does nothing much.
.IP "\(bu" 4
Inlining of subs with an empty prototype is now more consistent than
before.  Previously, a sub with multiple statements, all but the last
optimised away, would be inlinable only if it were an anonymous sub
containing a string \f(CW\*(C`eval\*(C'\fR or \f(CW\*(C`state\*(C'\fR declaration or closing over an
outer lexical variable (or any anonymous sub under the debugger).  Now any
sub that gets folded to a single constant after statements have been
optimised away is eligible for inlining.  This applies to things like \f(CW\*(C`sub
() { jabber() if DEBUG; 42 }\*(C'\fR.
.Sp
Some subroutines with an explicit \f(CW\*(C`return\*(C'\fR were being made inlinable,
contrary to the documentation,  Now \f(CW\*(C`return\*(C'\fR always prevents inlining.
.IP "\(bu" 4
On some systems, such as \s-1VMS, \s0\f(CW\*(C`crypt\*(C'\fR can return a non-ASCII string.  If a
scalar assigned to had contained a \s-1UTF8\s0 string previously, then \f(CW\*(C`crypt\*(C'\fR
would not turn off the \s-1UTF8\s0 flag, thus corrupting the return value.  This
would happen with \f(CW\*(C`$lexical = crypt ...\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`crypt\*(C'\fR no longer calls \f(CW\*(C`FETCH\*(C'\fR twice on a tied first argument.
.IP "\(bu" 4
An unterminated here-doc on the last line of a quote-like operator
(\f(CW\*(C`qq[${ <<END }]\*(C'\fR, \f(CW\*(C`/(?{ <<END })/\*(C'\fR) no longer causes a double free.  It
started doing so in 5.18.
.IP "\(bu" 4
Fixed two assertion failures introduced into \f(CW\*(C`\-DPERL_OP_PARENT\*(C'\fR
builds. [perl #108276]
.SH "Known Problems"
.IX Header "Known Problems"
.IP "\(bu" 4
Builds on FreeBSD 10.x currently fail when compiling \s-1POSIX\s0. A workaround is
to specify \f(CW\*(C`\-Ui_fenv\*(C'\fR when running \f(CW\*(C`Configure\*(C'\fR.
.SH "Errata From Previous Releases"
.IX Header "Errata From Previous Releases"
.IP "\(bu" 4
Due to a mistake in the string-copying logic, copying the value of a state
variable could instead steal the value and undefine the variable.  This
bug, introduced in 5.20, would happen mostly for long strings (1250 chars
or more), but could happen for any strings under builds with copy-on-write
disabled.  [perl #123029]
.Sp
This bug was actually fixed in 5.21.5, but it was not until after that
release that this bug, and the fact that it had been fixed, were
discovered.
.IP "\(bu" 4
If a named sub tries to access a scalar declared in an outer anonymous sub,
the variable is not available, so the named sub gets its own undefined
scalar.  In 5.10, attempts to take a reference to the variable
(\f(CW\*(C`\e$that_variable\*(C'\fR) began returning a reference to a \fIcopy\fR of it
instead.  This was accidentally fixed in 5.21.4, but the bug and its fix
were not noticed till now.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.21.6 represents approximately 4 weeks of development since Perl 5.21.5
and contains approximately 60,000 lines of changes across 920 files from 25
authors.
.PP
Excluding auto-generated files, documentation and release tools, there were
approximately 48,000 lines of changes to 630 .pm, .t, .c and .h files.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.21.6:
.PP
Aaron Crane, Abigail, Andrew Fresh, Andy Dougherty, Brian Fraser, Chad Granum,
Chris 'BinGOs' Williams, Craig A. Berry, Daniel Dragan, David Mitchell, Doug
Bell, Father Chrysostomos, Glenn D. Golden, James E Keenan, Jarkko Hietaniemi,
Jim Cromie, Karen Etheridge, Karl Williamson, Lukas Mai, Ricardo Signes, Shlomi
Fish, Slaven Rezic, Steve Hay, Tony Cook, Yaroslav Kuzmin.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0 modules
included in Perl's core. We're grateful to the entire \s-1CPAN\s0 community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of \f(CW\*(C`perl \-V\*(C'\fR,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5\-security\-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
\&\s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details on
what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
