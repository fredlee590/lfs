.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5215DELTA 1"
.TH PERL5215DELTA 1 "2015-05-13" "perl v5.22.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5215delta \- what is new for perl v5.21.5
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.21.4 release and the 5.21.5
release.
.PP
If you are upgrading from an earlier release such as 5.21.3, first read
perl5214delta, which describes differences between 5.21.3 and 5.21.4.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "New double-diamond operator"
.IX Subsection "New double-diamond operator"
\&\f(CW\*(C`<<>>\*(C'\fR is like \f(CW\*(C`<>\*(C'\fR but uses three-argument \f(CW\*(C`open\*(C'\fR to open
each file in \f(CW@ARGV\fR.  So each element of \f(CW@ARGV\fR is an actual file name, and
\&\*(L"|foo\*(R" won't be treated as a pipe open.
.SS "Aliasing via reference"
.IX Subsection "Aliasing via reference"
Variables and subroutines can now be aliased by assigning to a reference:
.PP
.Vb 2
\&    \e$c = \e$d;
\&    \e&x = \e&y;
.Ve
.PP
Or by using a backslash before a \f(CW\*(C`foreach\*(C'\fR iterator variable, which is
perhaps the most useful idiom this feature provides:
.PP
.Vb 1
\&    foreach \e%hash (@array_of_hash_refs) { ... }
.Ve
.PP
This feature is experimental and must be enabled via \f(CW\*(C`use feature
\&\*(Aqrefaliasing\*(Aq\*(C'\fR.  It will warn unless the \f(CW\*(C`experimental::refaliasing\*(C'\fR
warnings category is disabled.
.PP
See \*(L"Assigning to References\*(R" in perlref
.SS "Perl now supports \s-1POSIX 2008\s0 locale currency additions."
.IX Subsection "Perl now supports POSIX 2008 locale currency additions."
On platforms that are able to handle \s-1POSIX.1\-2008,\s0 the
hash returned by
\&\f(CW\*(C`POSIX::localeconv()\*(C'\fR
includes the international currency fields added by that version of the
\&\s-1POSIX\s0 standard.  These are
\&\f(CW\*(C`int_n_cs_precedes\*(C'\fR,
\&\f(CW\*(C`int_n_sep_by_space\*(C'\fR,
\&\f(CW\*(C`int_n_sign_posn\*(C'\fR,
\&\f(CW\*(C`int_p_cs_precedes\*(C'\fR,
\&\f(CW\*(C`int_p_sep_by_space\*(C'\fR,
and
\&\f(CW\*(C`int_p_sign_posn\*(C'\fR.
.SS "Packing infinity or not-a-number into a character is now fatal"
.IX Subsection "Packing infinity or not-a-number into a character is now fatal"
Before, when trying to pack infinity or not-a-number into a
(signed) character, Perl would warn, and assumed you tried to
pack \f(CW0xFF\fR; if you gave it as an argument to \f(CW\*(C`chr\*(C'\fR,
\&\f(CW\*(C`U+FFFD\*(C'\fR was returned.
.PP
But now, all such actions (\f(CW\*(C`pack\*(C'\fR, \f(CW\*(C`chr\*(C'\fR, and \f(CW\*(C`print \*(Aq%c\*(Aq\*(C'\fR)
result in a fatal error.
.SS "Inf and NaN"
.IX Subsection "Inf and NaN"
Many small improvements, bug fixes and added test cases for dealing 
with math related to infinity and not-a-number.
.SH "Security"
.IX Header "Security"
.SS "Perl is now compiled with \-fstack\-protector\-strong if available"
.IX Subsection "Perl is now compiled with -fstack-protector-strong if available"
Perl has been compiled with the anti-stack-smashing option
\&\f(CW\*(C`\-fstack\-protector\*(C'\fR since 5.10.1.  Now Perl uses the newer variant
called \f(CW\*(C`\-fstack\-protector\-strong\*(C'\fR, if available.  (This was added
already in 5.21.4.)
.SH "Deprecations"
.IX Header "Deprecations"
.SS "Use of multiple /x regexp modifiers"
.IX Subsection "Use of multiple /x regexp modifiers"
It is now deprecated to say something like any of the following:
.PP
.Vb 3
\&    qr/foo/xx;
\&    /(?xax:foo)/;
\&    use re qw(/amxx);
.Ve
.PP
That is, now \f(CW\*(C`x\*(C'\fR should only occur once in any string of contiguous
regular expression pattern modifiers.  We do not believe there are any
occurrences of this in all of \s-1CPAN. \s0 This is in preparation for a future
Perl release having \f(CW\*(C`/xx\*(C'\fR mean to allow white-space for readability in
bracketed character classes (those enclosed in square brackets:
\&\f(CW\*(C`[...]\*(C'\fR).
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
\&\f(CW\*(C`length\*(C'\fR is up to 20% faster for non\-magical/non\-tied scalars containing a
string if it is a non\-utf8 string or if \f(CW\*(C`use bytes;\*(C'\fR is in scope.
.IP "\(bu" 4
Non\-magical/non\-tied scalars that contain only a floating point value and are
on most Perl builds with 64 bit integers now use 8\-32 less bytes of memory
depending on \s-1OS.\s0
.IP "\(bu" 4
In \f(CW\*(C`@array = split\*(C'\fR, the assignment can be optimized away with \f(CW\*(C`split\*(C'\fR
writing directly to the array.  This optimisation was happening only for
package arrays other than \f(CW@_\fR and only
sometimes.  Now this optimisation happens
almost all the time.
.IP "\(bu" 4
\&\f(CW\*(C`join\*(C'\fR is now subject to constant folding.  Moreover, \f(CW\*(C`join\*(C'\fR with a
scalar or constant for the separator and a single-item list to join is
simplified to a stringification.  The separator doesn't even get evaluated.
.IP "\(bu" 4
\&\f(CW\*(C`qq(@array)\*(C'\fR is implemented using two ops: a stringify op and a join op.
If the qq contains nothing but a single array, the stringification is
optimized away.
.IP "\(bu" 4
\&\f(CW\*(C`our $var\*(C'\fR and \f(CW\*(C`our($s,@a,%h)\*(C'\fR in void context are no longer evaluated at
run time.  Even a whole sequence of \f(CW\*(C`our $foo;\*(C'\fR statements will simply be
skipped over.  The same applies to \f(CW\*(C`state\*(C'\fR variables.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
attributes has been upgraded from version 0.23 to 0.24.
.Sp
Avoid reading beyond the end of a buffer. [perl #122629]
.IP "\(bu" 4
B has been upgraded from version 1.51 to 1.52.
.IP "\(bu" 4
B::Concise has been upgraded from version 0.993 to 0.994.
.Sp
Null ops that are part of the execution chain are now given sequence
numbers.
.Sp
Private flags for nulled ops are now dumped with mnemonics as they would be
for the non-nulled counterparts.
.Sp
B::Deparse has been upgraded from version 1.28 to 1.29.
.Sp
Parenthesised arrays in lists passed to \f(CW\*(C`\e\*(C'\fR are now correctly deparsed
with parentheses (e.g., \f(CW\*(C`\e(@a, (@b), @c)\*(C'\fR now retains the parentheses
around \f(CW@b\fR), this preserving the flattening behaviour of referenced
parenthesised arrays.  Formerly, it only worked for one array: \f(CW\*(C`\e(@a)\*(C'\fR.
.Sp
\&\f(CW\*(C`local our\*(C'\fR is now deparsed correctly, with the \f(CW\*(C`our\*(C'\fR included.
.Sp
\&\f(CW\*(C`for($foo; !$bar; $baz) {...}\*(C'\fR was deparsed without the \f(CW\*(C`!\*(C'\fR (or \f(CW\*(C`not\*(C'\fR).
This has been fixed.
.Sp
Core keywords that conflict with lexical subroutines are now deparsed with
the \f(CW\*(C`CORE::\*(C'\fR prefix.
.Sp
\&\f(CW\*(C`foreach state $x (...) {...}\*(C'\fR now deparses correctly with \f(CW\*(C`state\*(C'\fR and
not \f(CW\*(C`my\*(C'\fR.
.Sp
\&\f(CW\*(C`our @array = split(...)\*(C'\fR now deparses correctly with \f(CW\*(C`our\*(C'\fR in those
cases where the assignment is optimized away.
.IP "\(bu" 4
B::Debug has been upgraded from version 1.21 to 1.22.
.IP "\(bu" 4
B::Deparse has been upgraded from version 1.28 to 1.29.
.IP "\(bu" 4
Compress::Raw::Bzip2 has been upgraded from version 2.064 to 2.066.
.IP "\(bu" 4
Compress::Raw::Zlib has been upgraded from version 2.065 to 2.066.
.IP "\(bu" 4
CPAN::Meta has been upgraded from version 2.142060 to 2.142690.
.IP "\(bu" 4
DynaLoader has been upgraded from version 1.26 to 1.27.
.Sp
Remove dl_nonlazy global if unused in Dynaloader. [perl #122926]
.IP "\(bu" 4
Errno has been upgraded from version 1.20_04 to 1.21.
.IP "\(bu" 4
experimental has been upgraded from version 0.010 to 0.012.
.IP "\(bu" 4
ExtUtils::CBuilder has been upgraded from version 0.280219 to 0.280220.
.IP "\(bu" 4
ExtUtils::Miniperl has been upgraded from version 1.02 to 1.03.
.IP "\(bu" 4
Fcntl has been upgraded from version 1.11 to 1.13.
.Sp
Add support for the Linux pipe buffer size \fIfcntl()\fR commands.
.IP "\(bu" 4
feature has been upgraded from version 1.37 to 1.38.
.IP "\(bu" 4
File::Find has been upgraded from version 1.28 to 1.29.
.Sp
Slightly faster module loading time.
.IP "\(bu" 4
File::Spec has been upgraded from version 3.50 to 3.51.
.IP "\(bu" 4
HTTP::Tiny has been upgraded from version 0.049 to 0.050.
.IP "\(bu" 4
The IO-Compress set of modules has been upgraded from version 2.064 to 2.066.
.IP "\(bu" 4
\&\s-1JSON::PP\s0 has been upgraded from version 2.27203 to 2.27300.
.IP "\(bu" 4
The libnet collection of modules has been upgraded from version 1.27 to 3.02.
.Sp
Support for IPv6 and \s-1SSL\s0 to Net::FTP, Net::NNTP, Net::POP3 and Net::SMTP.
.Sp
Improvements in Net::SMTP authentication.
.IP "\(bu" 4
Module::CoreList has been upgraded from version 5.20140920 to 5.20141020.
.Sp
Updated to cover the latest releases of Perl.
.IP "\(bu" 4
Opcode has been upgraded from version 1.28 to 1.29.
.IP "\(bu" 4
The PathTools module collection has been upgraded from version 3.50 to 3.51.
.Sp
Slightly faster module loading time.
.IP "\(bu" 4
perlfaq has been upgraded from version 5.0150045 to version 5.0150046.
[perl #123008]
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from version 1.43 to 1.45.
.Sp
\&\fIPOSIX::tmpnam()\fR now produces a deprecation warning.  [perl #122005]
.IP "\(bu" 4
re has been upgraded from version 0.26 to 0.27.
.IP "\(bu" 4
Socket has been upgraded from version 2.015 to 2.016.
.IP "\(bu" 4
Test::Simple has been upgraded from version 1.001006 to 1.001008.
.IP "\(bu" 4
threads::shared has been upgraded from version 1.46 to 1.47.
.IP "\(bu" 4
warnings has been upgraded from version 1.26 to 1.28.
.IP "\(bu" 4
XSLoader has been upgraded from version 0.17 to 0.18.
.Sp
Allow XSLoader to load modules from a different namespace.
[perl #122455]
.SH "Documentation"
.IX Header "Documentation"
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlrecharclass\fR
.IX Subsection "perlrecharclass"
.IP "\(bu" 4
Clarifications have been added to \*(L"Character Ranges\*(R" in perlrecharclass
to the effect that Perl guarantees that \f(CW\*(C`[A\-Z]\*(C'\fR, \f(CW\*(C`[a\-z]\*(C'\fR, \f(CW\*(C`[0\-9]\*(C'\fR and
any subranges thereof in regular expression bracketed character classes
are guaranteed to match exactly what a naive English speaker would
expect them to match, even on platforms (such as \s-1EBCDIC\s0) where special
handling is required to accomplish this.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Errors\fR
.IX Subsection "New Errors"
.IP "\(bu" 4
Cannot chr \f(CW%f\fR
.IP "\(bu" 4
Cannot compress \f(CW%f\fR in pack
.IP "\(bu" 4
Cannot pack \f(CW%f\fR with '%c'
.IP "\(bu" 4
Cannot print \f(CW%f\fR with '%c'
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP "\(bu" 4
\&'\*(L"my\*(R" variable &foo::bar can't be in a package' has been reworded to say
\&'subroutine' instead of 'variable'.
.SH "Testing"
.IX Header "Testing"
.IP "\(bu" 4
Some regular expression tests are written in such a way that they will
run very slowly if certain optimizations break. These tests have been
moved into new files, \fIt/re/speed.t\fR and \fIt/re/speed_thr.t\fR,
and are run with a \f(CW\*(C`watchdog()\*(C'\fR.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Regained Platforms"
.IX Subsection "Regained Platforms"
\&\s-1IRIX\s0 and Tru64 platforms are working again.
(Some \f(CW\*(C`make test\*(C'\fR failures remain.)
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "\s-1EBCDIC\s0" 4
.IX Item "EBCDIC"
Special handling is required on \s-1EBCDIC\s0 platforms to get \f(CW\*(C`qr/[i\-j]/\*(C'\fR to
match only \f(CW"i"\fR and \f(CW"j"\fR, since there are 7 characters between the
code points for \f(CW"i"\fR and \f(CW"j"\fR.  This special handling had only been
invoked when both ends of the range are literals.  Now it is also
invoked if any of the \f(CW\*(C`\eN{...}\*(C'\fR forms for specifying a character by
name or Unicode code point is used instead of a literal.  See
\&\*(L"Character Ranges\*(R" in perlrecharclass.
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP "\(bu" 4
SVs of type SVt_NV are now bodyless when a build configure and platform allow
it, specifically \f(CW\*(C`sizeof(NV) <= sizeof(IV)\*(C'\fR. The bodyless trick is the same one
as for IVs since 5.9.2, but for NVs, unlike IVs, is not guaranteed on all
platforms and build configurations.
.IP "\(bu" 4
The \f(CW$DB::single\fR, \f(CW$DB::signal\fR and \f(CW$DB::trace\fR now have set and
get magic that stores their values as IVs and those IVs are used when
testing their values in \f(CW\*(C`pp_dbstate\*(C'\fR.  This prevents perl from
recursing infinity if an overloaded object is assigned to any of those
variables. [perl #122445]
.IP "\(bu" 4
\&\f(CW\*(C`Perl_tmps_grow\*(C'\fR which is marked as public \s-1API\s0 but undocumented has been
removed from public \s-1API.\s0 If you use \f(CW\*(C`EXTEND_MORTAL\*(C'\fR macro in your \s-1XS\s0 code to
preextend the mortal stack, you are unaffected by this change.
.IP "\(bu" 4
\&\f(CW\*(C`cv_name\*(C'\fR, which was introduced in 5.21.4, has been changed incompatibly.
It now has a flags field that allows the caller to specify whether the name
should be fully qualified.  See \*(L"cv_name\*(R" in perlapi.
.IP "\(bu" 4
Internally Perl no longer uses the \f(CW\*(C`SVs_PADMY\*(C'\fR flag.  \f(CW\*(C`SvPADMY()\*(C'\fR now
returns a true value for anything not marked \s-1PADTMP.  \s0\f(CW\*(C`SVs_PADMY\*(C'\fR is now
defined as 0.
.IP "\(bu" 4
The macros SETsv and SETsvUN have been removed. They were no longer used
in the core since commit 6f1401dc2a, and have not been found present on
\&\s-1CPAN.\s0
.IP "\(bu" 4
The \f(CW\*(C`SvFAKE\*(C'\fR bit (unused on HVs) got informally reserved by
David Mitchell for future work on vtables.
.IP "\(bu" 4
The \f(CW\*(C`sv_catpvn_flags\*(C'\fR function accepts \f(CW\*(C`SV_CATBYTES\*(C'\fR and \f(CW\*(C`SV_CATUTF8\*(C'\fR
flags, which specify whether the appended string is bytes or utf8,
respectively.
.IP "\(bu" 4
A new opcode class, \f(CW\*(C`METHOP\*(C'\fR has been introduced, which holds
class/method related info needed at runtime to improve performance
of class/object method calls.
.Sp
\&\f(CW\*(C`OP_METHOD\*(C'\fR and \f(CW\*(C`OP_METHOD_NAMED\*(C'\fR are moved from being
\&\f(CW\*(C`UNOP/SVOP\*(C'\fR to being \f(CW\*(C`METHOP\*(C'\fR.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
Locking and unlocking values via Hash::Util or \f(CW\*(C`Internals::SvREADONLY\*(C'\fR
no longer has any effect on values that are read-only to begin.
Previously, unlocking such values could result in crashes, hangs or
other erratic behaviour.
.IP "\(bu" 4
The internal \f(CW\*(C`looks_like_number\*(C'\fR function (which Scalar::Util provides
access to) began erroneously to return true for \*(L"\-e1\*(R" in 5.21.4, affecting
also \f(CW\*(C`\-\*(Aq\-e1\*(Aq\*(C'\fR.  This has been fixed.
.IP "\(bu" 4
The flip-flop operator (\f(CW\*(C`..\*(C'\fR in scalar context) would return the same
scalar each time, unless the containing subroutine was called recursively.
Now it always returns a new scalar.  [perl #122829]
.IP "\(bu" 4
Some unterminated \f(CW\*(C`(?(...)...)\*(C'\fR constructs in regular expressions would
either crash or give erroneous error messages.  \f(CW\*(C`/(?(1)/\*(C'\fR is one such
example.
.IP "\(bu" 4
\&\f(CW\*(C`pack "w", $tied\*(C'\fR no longer calls \s-1FETCH\s0 twice.
.IP "\(bu" 4
List assignments like \f(CW\*(C`($x, $z) = (1, $y)\*(C'\fR now work correctly if \f(CW$x\fR and \f(CW$y\fR
have been aliased by \f(CW\*(C`foreach\*(C'\fR.
.IP "\(bu" 4
Some patterns including code blocks with syntax errors, such as
\&\f(CW\*(C`/ (?{(^{})/\*(C'\fR, would hang or fail assertions on debugging builds.  Now
they produce errors.
.IP "\(bu" 4
An assertion failure when parsing \f(CW\*(C`sort\*(C'\fR with debugging enabled has been
fixed.  [perl #122771]
.IP "\(bu" 4
\&\f(CW\*(C`*a = *b; @a = split //, $b[1]\*(C'\fR could do a bad read and produce junk
results.
.IP "\(bu" 4
In \f(CW\*(C`() = @array = split\*(C'\fR, the \f(CW\*(C`() =\*(C'\fR at the beginning no longer confuses
the optimizer, making it assume a limit of 1.
.IP "\(bu" 4
Fatal warnings no longer prevent the output of syntax errors.
[perl #122966]
.IP "\(bu" 4
Fixed a NaN double to long double conversion error on \s-1VMS.\s0 For quiet NaNs
(and only on Itanium, not Alpha) negative infinity instead of NaN was
produced.
.IP "\(bu" 4
Fixed the issue that caused \f(CW\*(C`make distclean\*(C'\fR to leave files behind
that shouldn't. [perl #122820]
.IP "\(bu" 4
\&\s-1AIX\s0 now sets the length in \f(CW\*(C`getsockopt\*(C'\fR correctly. [perl #120835],
[rt #91183], [rt #85570].
.IP "\(bu" 4
During the pattern optimization phase, we no longer recurse into
\&\s-1GOSUB/GOSTART\s0 when not \s-1SCF_DO_SUBSTR.\s0 This prevents the optimizer
to run \*(L"forever\*(R" and exhaust all memory. [perl #122283]
.IP "\(bu" 4
\&\fIt/op/crypt.t\fR now performs \s-1SHA\-256\s0 algorithm if the default one
is disabled. [perl #121591]
.IP "\(bu" 4
Fixed an off-by-one error when setting the size of shared array.
[perl #122950]
.IP "\(bu" 4
Fixed a bug that could cause perl to execute an infinite loop during
compilation. [perl #122995]
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.21.5 represents approximately 4 weeks of development since Perl 5.21.4
and contains approximately 40,000 lines of changes across 530 files from 33
authors.
.PP
Excluding auto-generated files, documentation and release tools, there were
approximately 29,000 lines of changes to 390 .pm, .t, .c and .h files.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.21.5:
.PP
Aaron Crane, Abigail, Alberto Simo\*~es, Andrew Fresh, Chris 'BinGOs' Williams,
Craig A. Berry, Dagfinn Ilmari Mannsa\*oker, Daniel Dragan, David Mitchell, Doug
Bell, Ed J, Father Chrysostomos, George Greer, Graham Knop, James E Keenan,
Jarkko Hietaniemi, Karen Etheridge, Karl Williamson, Leon Timmermans, Lukas
Mai, Niko Tyni, Peter Martini, Petr Pi\*'saX, Rafael Garcia-Suarez, Reini Urban,
Ricardo Signes, Shlomi Fish, Steve Hay, syber, Tony Cook, Vincent Pit, Yves
Orton, \*(Aevar Arnfjo\*:r\*(d- Bjarmason.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0 modules
included in Perl's core. We're grateful to the entire \s-1CPAN\s0 community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of \f(CW\*(C`perl \-V\*(C'\fR,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5\-security\-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
\&\s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details on
what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
