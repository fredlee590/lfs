.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5217DELTA 1"
.TH PERL5217DELTA 1 "2015-05-13" "perl v5.22.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5217delta \- what is new for perl v5.21.7
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.21.6 release and the 5.21.7
release.
.PP
If you are upgrading from an earlier release such as 5.21.5, first read
perl5216delta, which describes differences between 5.21.5 and 5.21.6.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "faster array and hash lookups"
.IX Subsection "faster array and hash lookups"
Array and hash lookups (especially nested ones) that use only constants
or simple variables as keys, are now considerably faster. See
\&\*(L"Internal Changes\*(R" for more details.
.ie n .SS """fileno"" now works on directory handles"
.el .SS "\f(CWfileno\fP now works on directory handles"
.IX Subsection "fileno now works on directory handles"
When the relevant support is available in the operating system, the
\&\f(CW\*(C`fileno\*(C'\fR builtin now works on directory handles, yielding the
underlying file descriptor in the same way as for filehandles. On
operating systems without such support, \f(CW\*(C`fileno\*(C'\fR on a directory handle
continues to return the undefined value, as before, but also sets \f(CW$!\fR to
indicate that the operation is not supported.
.PP
Currently, this uses either a \f(CW\*(C`dd_fd\*(C'\fR member in the \s-1OS \s0\f(CW\*(C`DIR\*(C'\fR
structure, or a \fIdirfd\fR\|(3) function as specified by \s-1POSIX.1\-2008.\s0
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.ie n .SS """&"" and ""\e&"" prototypes accepts only subs"
.el .SS "\f(CW&\fP and \f(CW\e&\fP prototypes accepts only subs"
.IX Subsection "& and & prototypes accepts only subs"
The \f(CW\*(C`&\*(C'\fR prototype character now accepts only anonymous subs (\f(CW\*(C`sub {...}\*(C'\fR)
and things beginning with \f(CW\*(C`\e&\*(C'\fR.  Formerly it erroneously also allowed
\&\f(CW\*(C`undef\*(C'\fR and references to array, hashes, and lists.  [perl #4539]
[perl #123062]
.PP
The \f(CW\*(C`\e&\*(C'\fR prototype was allowing subroutine calls, whereas now it only
allows subroutines.  \f(CW&foo\fR is permitted.  \f(CW\*(C`&foo()\*(C'\fR and \f(CW\*(C`foo()\*(C'\fR are not.
[perl #77860]
.ie n .SS """use encoding"" is now lexical"
.el .SS "\f(CWuse encoding\fP is now lexical"
.IX Subsection "use encoding is now lexical"
The encoding pragma's effect is now limited to lexical scope.  This
pragma is deprecated, but in the meantime, it could adversely affect
unrelated modules that are included in the same program.
.SS "List slices returning empty lists"
.IX Subsection "List slices returning empty lists"
List slices return an empty list now only if the original list was empty
(or if there are no indices).  Formerly, a list slice would return an empty
list if all indices fell outside the original list.  [perl #114498]
.SH "Deprecations"
.IX Header "Deprecations"
.ie n .SS "Setting ""${^ENCODING}"" to anything but ""undef"""
.el .SS "Setting \f(CW${^ENCODING}\fP to anything but \f(CWundef\fP"
.IX Subsection "Setting ${^ENCODING} to anything but undef"
This variable allows Perl scripts to be written in a non-ASCII,
non\-UTF\-8 encoding.  However, it affects all modules globally, leading
to wrong answers and segmentation faults.  New scripts should be written
in \s-1UTF\-8\s0; old scripts should be converted to \s-1UTF\-8,\s0 which is easily done
with the encoding pragma.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
Win32 Perl uses 8 \s-1KB\s0 less of per-process memory than before for every perl
process of this version. This data is now memory mapped from disk and shared
between perl processes from the same perl binary.
.IP "\(bu" 4
If method and class names are known at compile time, hashes are precomputed
to speed up run-time method lookup.  Also, compound method names like
\&\f(CW\*(C`SUPER::new\*(C'\fR are parsed at compile time, to save having to parse them at
run time.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
The PathTools module collection has been upgraded from 3.52 to 3.53.
.Sp
Don't turn leading \f(CW\*(C`//\*(C'\fR into \f(CW\*(C`/\*(C'\fR on Cygwin. [perl #122635]
.IP "\(bu" 4
Archive::Tar has been upgraded from version 2.02 to 2.04.
.IP "\(bu" 4
arybase has been upgraded from version 0.08 to 0.09.
.IP "\(bu" 4
B has been upgraded from version 1.53 to 1.54.
.Sp
Nulled COPs are now of class \f(CW\*(C`B::COP\*(C'\fR, rather than \f(CW\*(C`B::OP\*(C'\fR.
.Sp
B::REGEXP objects now provide a \f(CW\*(C`qr_anoncv\*(C'\fR method for accessing the
implicit \s-1CV\s0 associated with \f(CW\*(C`qr//\*(C'\fR things containing code blocks, and a
\&\f(CW\*(C`compflags\*(C'\fR method that returns the pertinent flags originating from the
\&\f(CW\*(C`qr//blahblah\*(C'\fR op.
.Sp
B::PMOP now provides a \f(CW\*(C`pmregexp\*(C'\fR method returning a B::REGEXP object.
.Sp
Two new classes, B::PADNAME and B::PADNAMELIST, have been introduced.
.IP "\(bu" 4
B::Concise has been upgraded from version 0.995 to 0.996.
.IP "\(bu" 4
B::Deparse has been upgraded from version 1.30 to 1.31.
.Sp
\&\s-1BEGIN\s0 blocks at the end of the enclosing scope are now deparsed in the
right place.  [perl #77452]
.Sp
\&\s-1BEGIN\s0 blocks were sometimes deparsed as _\|_ANON_\|_, but are now always called
\&\s-1BEGIN.\s0
.Sp
Lexical subroutines are now fully deparsed.  [perl #116553]
.Sp
Deparsing of \f(CW\*(C`$lexical =~ //\*(C'\fR was accidentally broken in 1.30 (perl
5.21.6), omitting the \f(CW\*(C`$lexical =~\*(C'\fR, but has now been fixed.
.Sp
\&\f(CW\*(C`Anything =~ y///r\*(C'\fR with \f(CW\*(C`/r\*(C'\fR no longer omits the left-hand operand.
.Sp
The op trees that make up regexp code blocks are now deparsed for real.
Formerly, the original string that made up the regular expression was used.
That caused problems with \f(CW\*(C`qr/(?{<<heredoc})/\*(C'\fR and multiline code blocks,
which were deparsed incorrectly.  [perl #123217] [perl #115256]
.Sp
\&\f(CW$;\fR at the end of a statement no longer loses its semicolon.
[perl #123357]
.Sp
Some cases of subroutine declarations stored in the stash in shorthand form
were being omitted.
.Sp
Non-ASCII characters are now consistently escaped in strings, instead of
some of the time.  (There are still outstanding problems with regular
expressions and identifiers that have not been fixed.)
.Sp
When prototype sub calls are deparsed with \f(CW\*(C`&\*(C'\fR (e.g., under the \fB\-P\fR
option), \f(CW\*(C`scalar\*(C'\fR is now added where appropriate, to force the scalar
context implied by the prototype.
.Sp
\&\f(CW\*(C`require(foo())\*(C'\fR, \f(CW\*(C`do(foo())\*(C'\fR, \f(CW\*(C`goto(foo())\*(C'\fR and similar constructs with
loop controls are now deparsed correctly.  The outer parentheses are not
optional.
.Sp
Whitespace is no longer escaped in regular expressions, because it was
getting erroneously escaped within \f(CW\*(C`(?x:...)\*(C'\fR sections.
.Sp
\&\f(CW\*(C`sub foo { foo() }\*(C'\fR is now deparsed with those mandatory parentheses.
.Sp
\&\f(CW\*(C`/@array/\*(C'\fR is now deparsed as a regular expression, and not just
\&\f(CW@array\fR.
.Sp
\&\f(CW\*(C`/@{\-}/\*(C'\fR, \f(CW\*(C`/@{+}/\*(C'\fR and \f(CW$#{1}\fR are now deparsed with the braces, which
are mandatory in these cases.
.Sp
In deparsing feature bundles, B::Deparse was emitting \f(CW\*(C`no feature;\*(C'\fR first
instead of \f(CW\*(C`no feature \*(Aq:all\*(Aq;\*(C'\fR.  This has been fixed.
.Sp
\&\f(CW\*(C`chdir FH\*(C'\fR is now deparsed without quotation marks.
.Sp
\&\f(CW\*(C`\emy @a\*(C'\fR is now deparsed without parentheses.  (Parenthese would flatten
the array.)
.Sp
\&\f(CW\*(C`system\*(C'\fR and \f(CW\*(C`exec\*(C'\fR followed by a block are now deparsed correctly.
Formerly there was an erroneous \f(CW\*(C`do\*(C'\fR before the block.
.Sp
\&\f(CW\*(C`use constant QR => qr/.../flags\*(C'\fR followed by \f(CW\*(C`"" =~ QR\*(C'\fR is no longer
without the flags.
.IP "\(bu" 4
charnames has been upgraded from version 1.41 to 1.43.
.IP "\(bu" 4
Compress::Raw::Bzip2 has been upgraded from version 2.066 to 2.067.
.IP "\(bu" 4
Compress::Raw::Zlib has been upgraded from version 2.066 to 2.067.
.IP "\(bu" 4
Data::Dumper has been upgraded from version 2.154 to 2.155.
.IP "\(bu" 4
DB_File has been upgraded from version 1.831 to 1.834.
.IP "\(bu" 4
Devel::Peek has been upgraded from version 1.19 to 1.20.
.IP "\(bu" 4
Devel::PPPort has been upgraded from version 3.24 to 3.25.
.IP "\(bu" 4
DynaLoader has been upgraded from version 1.28 to 1.29.
.IP "\(bu" 4
Encode has been upgraded from version 2.64 to 2.67.
.IP "\(bu" 4
Errno has been upgraded from version 1.21 to 1.22.
.IP "\(bu" 4
ExtUtils::CBuilder has been upgraded from version 0.280220 to 0.280221.
.IP "\(bu" 4
ExtUtils::MakeMaker has been upgraded from version 7.02 to 7.04.
.IP "\(bu" 4
ExtUtils::ParseXS has been upgraded from version 3.26 to 3.27.
.Sp
Only declare \f(CW\*(C`file\*(C'\fR unused if we actually define it.
.Sp
Improve generated \f(CW\*(C`RETVAL\*(C'\fR code generation to avoid repeated
references to \f(CWST(0)\fR.  [perl #123278]
.Sp
Broaden and document the \f(CW\*(C`/OBJ$/\*(C'\fR to \f(CW\*(C`/REF$/\*(C'\fR typemap optimization
for the \f(CW\*(C`DESTROY\*(C'\fR method.  [perl #123418]
.IP "\(bu" 4
feature has been upgraded from version 1.38 to 1.39.
.IP "\(bu" 4
File::Spec has been upgraded from version 3.51 to 3.54.
.IP "\(bu" 4
Filter::Util::Call has been upgraded from version 1.49 to 1.51.
.IP "\(bu" 4
HTTP::Tiny has been upgraded from version 0.051 to 0.053.
.IP "\(bu" 4
\&\s-1IO\s0 has been upgraded from version 1.34 to 1.35.
.IP "\(bu" 4
The IO::Compress module collection has been upgraded from version 2.066 to 2.067.
.IP "\(bu" 4
IO::Socket::IP has been upgraded from version 0.32 to 0.34.
.IP "\(bu" 4
Locale::Codes has been upgraded from version 3.32 to 3.33.
.IP "\(bu" 4
Locale::Maketext has been upgraded from version 1.25 to 1.26.
.IP "\(bu" 4
Module::CoreList has been upgraded from version 5.20141120 to 5.20141220.
.IP "\(bu" 4
mro has been upgraded from version 1.16 to 1.17.
.IP "\(bu" 4
NDBM_File has been upgraded from version 1.13 to 1.14.
.IP "\(bu" 4
Opcode has been upgraded from version 1.29 to 1.30.
.IP "\(bu" 4
PerlIO::scalar has been upgraded from version 0.20 to 0.21.
.Sp
Reading from a position well past the end of the scalar now correctly
returns end of file.  [perl #123443]
.Sp
Seeking to a negative position still fails, but no longer leaves the
file position set to a negation location.
.Sp
\&\f(CW\*(C`eof()\*(C'\fR on a \f(CW\*(C`PerlIO::scalar\*(C'\fR handle now properly returns true when
the file position is past the 2GB mark on 32\-bit systems.
.IP "\(bu" 4
Pod::Escapes has been upgraded from version 1.06 to 1.07.
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from version 1.46 to 1.48.
.IP "\(bu" 4
SDBM_File has been upgraded from version 1.11 to 1.12.
.IP "\(bu" 4
Storable has been upgraded from version 2.51 to 2.52.
.IP "\(bu" 4
strict has been upgraded from version 1.08 to 1.09.
.IP "\(bu" 4
Sys::Hostname has been upgraded from version 1.19 to 1.20.
.IP "\(bu" 4
Test::Simple has been upgraded from version 1.301001_075 to 1.301001_090.
.IP "\(bu" 4
threads has been upgraded from version 1.96 to 1.96_001.
.IP "\(bu" 4
Unicode::Collate has been upgraded from version 1.07 to 1.09.
.IP "\(bu" 4
XSLoader has been upgraded from version 0.19 to 0.20
.Sp
Don't test twice for bootstrap file.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP "\(bu" 4
\&\*(L"Variable \f(CW%s\fR will not stay shared\*(R" has been changed to say \*(L"Subroutine\*(R"
when it is actually a lexical sub that will not stay shared.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
\fIWin32\fR
.IX Subsection "Win32"
.IP "\(bu" 4
Intel C builds are now always built with C99 mode on.
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP "\(bu" 4
The \s-1PADNAME\s0 and \s-1PADNAMELIST\s0 types are now separate types, and no longer
simply aliases for \s-1SV\s0 and \s-1AV. \s0 [perl #123223]
.IP "\(bu" 4
Pad names are now always \s-1UTF8. \s0 The \f(CW\*(C`PadnameUTF8\*(C'\fR macro always returns
true.  Previously, this was effectively the case already, but any support
for two different internal representations of pad names has now been
removed.
.IP "\(bu" 4
The \f(CW\*(C`OP_SIBLING\*(C'\fR and \f(CW\*(C`OP_HAS_SIBLING\*(C'\fR macros added in an earlier 5.21.x
release have been renamed \f(CW\*(C`OpSIBLING\*(C'\fR and \f(CW\*(C`OpHAS_SIBLING\*(C'\fR, following the
existing convention.
.IP "\(bu" 4
A new op class, \f(CW\*(C`UNOP_AUX\*(C'\fR, has been added. This is a subclass of
\&\f(CW\*(C`UNOP\*(C'\fR with an \f(CW\*(C`op_aux\*(C'\fR field added, which points to an array of unions
of \f(CW\*(C`UV\*(C'\fR, \f(CW\*(C`SV*\*(C'\fR etc. It is intended for where an op needs to store more data
than a simple \f(CW\*(C`op_sv\*(C'\fR or whatever. Currently the only op of this type is
\&\f(CW\*(C`OP_MULTIDEREF\*(C'\fR (see below).
.IP "\(bu" 4
A new op has been added, \f(CW\*(C`OP_MULTIDEREF\*(C'\fR, which performs one or more
nested array and hash lookups where the key is a constant or simple
variable. For example the expression \f(CW$a[0]{$k}[$i]\fR, which previously
involved ten \f(CW\*(C`rv2Xv\*(C'\fR, \f(CW\*(C`Xelem\*(C'\fR, \f(CW\*(C`gvsv\*(C'\fR and \f(CW\*(C`const\*(C'\fR ops is now performed
by a single \f(CW\*(C`multideref\*(C'\fR op. It can also handle \f(CW\*(C`local\*(C'\fR, \f(CW\*(C`exists\*(C'\fR and
\&\f(CW\*(C`delete\*(C'\fR. A non-simple index expression, such as \f(CW\*(C`[$i+1]\*(C'\fR is still done
using \f(CW\*(C`aelem/helem\*(C'\fR, and single-level array lookup with a small constant
index is still done using \f(CW\*(C`aelemfast\*(C'\fR.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
On Win32, restoring in a child pseudo-process a variable that was
\&\f(CW\*(C`local()\*(C'\fRed in a parent pseudo-process before the \f(CW\*(C`fork\*(C'\fR happened caused
memory corruption and a crash in the child pseudo-process (and therefore \s-1OS\s0
process).  [perl #40565]
.IP "\(bu" 4
Calling \f(CW\*(C`write\*(C'\fR on a format with a \f(CW\*(C`^**\*(C'\fR field could produce a panic
in \fIsv_chop()\fR if there were insufficient arguments or if the variable
used to fill the field was empty.  [perl #123245]
.IP "\(bu" 4
Non-ASCII lexical sub names (use in error messages) on longer have extra
junk on the end.
.IP "\(bu" 4
The \f(CW\*(C`\e@\*(C'\fR subroutine prototype no longer flattens parenthesized arrays
(taking a reference to each element), but takes a reference to the array
itself.  [perl #47363]
.IP "\(bu" 4
A block containing nothing except a C\-style \f(CW\*(C`for\*(C'\fR loop could corrupt the
stack, causing lists outside the block to lose elements or have elements
overwritten.  This could happen with \f(CW\*(C`map { for(...){...} } ...\*(C'\fR and with
lists containing \f(CW\*(C`do { for(...){...} }\*(C'\fR.  [perl #123286]
.IP "\(bu" 4
\&\f(CW\*(C`scalar()\*(C'\fR now propagates lvalue context, so that
\&\f(CW\*(C`for(scalar($#foo)) { ... }\*(C'\fR can modify \f(CW$#foo\fR through \f(CW$_\fR.
.IP "\(bu" 4
\&\f(CW\*(C`qr/@array(?{block})/\*(C'\fR no longer dies with \*(L"Bizarre copy of \s-1ARRAY\*(R".\s0
[#123344]
.IP "\(bu" 4
\&\f(CW\*(C`eval \*(Aq$variable\*(Aq\*(C'\fR in nested named subroutines would sometimes look up a
global variable even with a lexical variable in scope.
.IP "\(bu" 4
In perl 5.20.0, \f(CW\*(C`sort CORE::fake\*(C'\fR where 'fake' is anything other than a
keyword started chopping of the last 6 characters and treating the result
as a sort sub name.  The previous behaviour of treating \*(L"CORE::fake\*(R" as a
sort sub name has been restored.  [perl #123410]
.IP "\(bu" 4
Outside of \f(CW\*(C`use utf8\*(C'\fR, a single-character Latin\-1 lexical variable is
disallowed.  The error message for it, \*(L"Can't use global \f(CW$foo\fR...\*(R", was
giving garbage instead of the variable name.
.IP "\(bu" 4
\&\f(CW\*(C`readline\*(C'\fR on a nonexistent handle was causing \f(CW\*(C`${^LAST_FH}\*(C'\fR to produce a
reference to an undefined scalar (or fail an assertion).  Now
\&\f(CW\*(C`${^LAST_FH}\*(C'\fR ends up undefined.
.IP "\(bu" 4
\&\f(CW\*(C`(...)x...\*(C'\fR in void context now applies scalar context to the left-hand
argument, instead of the context the current sub was called in.
[perl #123020]
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.21.7 represents approximately 4 weeks of development since Perl 5.21.6
and contains approximately 97,000 lines of changes across 640 files from 30
authors.
.PP
Excluding auto-generated files, documentation and release tools, there were
approximately 26,000 lines of changes to 400 .pm, .t, .c and .h files.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.21.7:
.PP
Aaron Crane, Aristotle Pagaltzis, Chad Granum, Chris 'BinGOs' Williams, Craig
A. Berry, Dagfinn Ilmari Mannsa\*oker, Daniel Dragan, David Mitchell, Eric
Herman, Father Chrysostomos, H.Merijn Brand, Hugo van der Sanden, James
Raspass, Jarkko Hietaniemi, Jim Cromie, Karen Etheridge, Karl Williamson, kmx,
Lukas Mai, Matthew Horsfall, Max Maischein, Petr Pi\*'saX, Ricardo Signes,
Shlomi Fish, Steffen Mu\*:ller, Steve Hay, Sullivan Beck, syber, Todd Rinaldo,
Tony Cook.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0 modules
included in Perl's core. We're grateful to the entire \s-1CPAN\s0 community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of \f(CW\*(C`perl \-V\*(C'\fR,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5\-security\-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
\&\s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details on
what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
