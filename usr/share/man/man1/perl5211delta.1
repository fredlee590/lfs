.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5211DELTA 1"
.TH PERL5211DELTA 1 "2015-05-13" "perl v5.22.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5211delta \- what is new for perl v5.21.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.21.0 release and the 5.21.1
release.
.PP
If you are upgrading from an earlier release such as 5.20.0, first read
perl5210delta, which describes differences between 5.20.0 and 5.21.0.
.SH "Notice"
.IX Header "Notice"
This release removes a number of previously deprecated constructs, many
that have been around for a long time. Please see \*(L"Incompatible Changes\*(R"
for more information.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode 7.0 is now supported"
.IX Subsection "Unicode 7.0 is now supported"
For details on what is in this release, see
<http://www.unicode.org/versions/Unicode7.0.0/>.
.SS "Experimental C Backtrace \s-1API\s0"
.IX Subsection "Experimental C Backtrace API"
Starting from Perl 5.21.1, on some platforms Perl supports retrieving
the C level backtrace (similar to what symbolic debuggers like gdb do).
.PP
The backtrace returns the stack trace of the C call frames,
with the symbol names (function names), the object names (like \*(L"perl\*(R"),
and if it can, also the source code locations (file:line).
.PP
The supported platforms are Linux and \s-1OS X \s0(some *BSD might work at
least partly, but they have not yet been tested).
.PP
The feature needs to be enabled with \f(CW\*(C`Configure \-Dusecbacktrace\*(C'\fR.
.PP
Also included is a C \s-1API\s0 to retrieve backtraces.
.PP
See \*(L"C backtrace\*(R" in perlhacktips for more information.
.ie n .SS """qr/foo/x"" now ignores any Unicode pattern white space"
.el .SS "\f(CWqr/foo/x\fP now ignores any Unicode pattern white space"
.IX Subsection "qr/foo/x now ignores any Unicode pattern white space"
The \f(CW\*(C`/x\*(C'\fR regular expression modifier allows the pattern to contain
white space and comments, both of which are ignored, for improved
readability.  Until now, not all the white space characters that Unicode
designates for this purpose were handled.  The additional ones now
recognized are
U+0085 \s-1NEXT LINE,
U+200E\s0 LEFT-TO-RIGHT \s-1MARK,
U+200F\s0 RIGHT-TO-LEFT \s-1MARK,
U+2028 LINE SEPARATOR,\s0
and
U+2029 \s-1PARAGRAPH SEPARATOR.\s0
.ie n .SS """use\ locale"" can restrict which locale categories are affected"
.el .SS "\f(CWuse\ locale\fP can restrict which locale categories are affected"
.IX Subsection "uselocale can restrict which locale categories are affected"
It is now possible to pass a parameter to \f(CW\*(C`use\ locale\*(C'\fR to specify
a subset of locale categories to be locale-aware, with the remaining
ones unaffected.  See \*(L"The \*(R"use locale\*(L" pragma\*(R" in perllocale for details.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.ie n .SS """\eN{}"" with a sequence of multiple spaces is now a fatal error."
.el .SS "\f(CW\eN{}\fP with a sequence of multiple spaces is now a fatal error."
.IX Subsection "N{} with a sequence of multiple spaces is now a fatal error."
This has been deprecated since v5.18.
.ie n .SS "In double-quotish ""\ec\fIX\fP"", \fIX\fP must now be a printable \s-1ASCII\s0 character"
.el .SS "In double-quotish \f(CW\ec\fP\f(CIX\fP\f(CW\fP, \fIX\fP must now be a printable \s-1ASCII\s0 character"
.IX Subsection "In double-quotish cX, X must now be a printable ASCII character"
In prior releases, failure to do this raised a deprecation warning.
.ie n .SS "Splitting the tokens ""(?"" and ""(*"" in regular expressions is now a fatal compilation error."
.el .SS "Splitting the tokens \f(CW(?\fP and \f(CW(*\fP in regular expressions is now a fatal compilation error."
.IX Subsection "Splitting the tokens (? and (* in regular expressions is now a fatal compilation error."
These had been deprecated since v5.18.
.ie n .SS "5 additional characters are treated as white space under ""/x"" in regex patterns (unless escaped)"
.el .SS "5 additional characters are treated as white space under \f(CW/x\fP in regex patterns (unless escaped)"
.IX Subsection "5 additional characters are treated as white space under /x in regex patterns (unless escaped)"
The use of these characters with \f(CW\*(C`/x\*(C'\fR outside bracketed character
classes and when not preceded by a backslash has raised a deprecation
warning since v5.18.  Now they will be ignored.  See \*(L"qr/foo/x\*(R"
for the list of the five characters.
.ie n .SS "Comment lines within ""(?[\ ])"" now are ended only by a ""\en"""
.el .SS "Comment lines within \f(CW(?[\ ])\fP now are ended only by a \f(CW\en\fP"
.IX Subsection "Comment lines within (?[]) now are ended only by a n"
\&\f(CW\*(C`(?[\ ])\*(C'\fR  is an experimental feature, introduced in v5.18.  It operates
as if \f(CW\*(C`/x\*(C'\fR is always enabled.  But there was a difference, comment
lines (following a \f(CW\*(C`#\*(C'\fR character) were terminated by anything matching
\&\f(CW\*(C`\eR\*(C'\fR which includes all vertical whitespace, such as form feeds.  For
consistency, this is now changed to match what terminates comment lines
outside \f(CW\*(C`(?[\ ])\*(C'\fR, namely a \f(CW\*(C`\en\*(C'\fR (even if escaped), which is the
same as what terminates a heredoc string and formats.
.SS "Omitting % and @ on hash and array names is no longer permitted"
.IX Subsection "Omitting % and @ on hash and array names is no longer permitted"
Really old Perl let you omit the @ on array names and the % on hash
names in some spots.  This has issued a deprecation warning since Perl
5.0, and is no longer permitted.
.ie n .SS """$!"" text is now in English outside ""use locale"" scope"
.el .SS "\f(CW``$!''\fP text is now in English outside \f(CW``use locale''\fP scope"
.IX Subsection """$!"" text is now in English outside ""use locale"" scope"
Previously, the text, unlike almost everything else, always came out
based on the current underlying locale of the program.  (Also affected
on some systems is \f(CW\*(C`"$^E\*(C'\fR".)  For programs that are unprepared to
handle locale, this can cause garbage text to be displayed.  It's better
to display text that is translatable via some tool than garbage text
which is much harder to figure out.
.ie n .SS """$!"" text will be returned in \s-1UTF\-8\s0 when appropriate"
.el .SS "\f(CW``$!''\fP text will be returned in \s-1UTF\-8\s0 when appropriate"
.IX Subsection """$!"" text will be returned in UTF-8 when appropriate"
The stringification of \f(CW$!\fR and \f(CW$^E\fR will have the \s-1UTF\-8\s0 flag set
when the text is actually non-ASCII \s-1UTF\-8. \s0 This will enable programs
that are set up to be locale-aware to properly output messages in the
user's native language.  Code that needs to continue the 5.20 and
earlier behavior can do the stringification within the scopes of both
\&'use bytes' and 'use locale \*(L":messages\*(R".  No other Perl operations will
be affected by locale; only \f(CW$!\fR and \f(CW$^E\fR stringification.  The
\&'bytes' pragma causes the \s-1UTF\-8\s0 flag to not be set, just as in previous
Perl releases.  This resolves [perl #112208].
.ie n .SS "Support for ""?PATTERN?"" without explicit operator has been removed"
.el .SS "Support for \f(CW?PATTERN?\fP without explicit operator has been removed"
.IX Subsection "Support for ?PATTERN? without explicit operator has been removed"
Starting regular expressions matching only once directly with the
question mark delimiter is now a syntax error, so that the question mark
can be available for use in new operators.  Write \f(CW\*(C`m?PATTERN?\*(C'\fR instead,
explicitly using the \f(CW\*(C`m\*(C'\fR operator: the question mark delimiter still
invokes match-once behaviour.
.ie n .SS """defined(@array)"" and ""defined(%hash)"" are now fatal errors"
.el .SS "\f(CWdefined(@array)\fP and \f(CWdefined(%hash)\fP are now fatal errors"
.IX Subsection "defined(@array) and defined(%hash) are now fatal errors"
These have been deprecated since v5.6.1 and have raised deprecation
warnings since v5.16.
.SS "Using a hash or an array as a reference are now fatal errors."
.IX Subsection "Using a hash or an array as a reference are now fatal errors."
For example, \f(CW\*(C`%foo\->{"bar"}\*(C'\fR now causes a fatal compilation
error.  These have been deprecated since before v5.8, and have raised
deprecation warnings since then.
.SH "Deprecations"
.IX Header "Deprecations"
.ie n .SS "Using a NO-BREAK space in a character alias for ""\eN{...}"" is now deprecated"
.el .SS "Using a NO-BREAK space in a character alias for \f(CW\eN{...}\fP is now deprecated"
.IX Subsection "Using a NO-BREAK space in a character alias for N{...} is now deprecated"
This non-graphic character is essentially indistinguishable from a
regular space, and so should not be allowed.  See
\&\*(L"\s-1CUSTOM ALIASES\*(R"\s0 in charnames.
.ie n .SS "A literal ""{"" should now be escaped in a pattern"
.el .SS "A literal \f(CW``{''\fP should now be escaped in a pattern"
.IX Subsection "A literal ""{"" should now be escaped in a pattern"
If you want a literal left curly bracket (also called a left brace) in a
regular expression pattern, you should now escape it by either
preceding it with a backslash (\f(CW"\e{"\fR) or enclosing it within square
brackets \f(CW"[{]"\fR, or by using \f(CW\*(C`\eQ\*(C'\fR; otherwise a deprecation warning
will be raised.  This was first announced as forthcoming in the v5.16
release; it will allow future extensions to the language to happen.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
Many internal functions have been refactored to improve performance and reduce
their memory footprints.
.Sp
[perl #121436] <https://rt.perl.org/Ticket/Display.html?id=121436>
[perl #121906] <https://rt.perl.org/Ticket/Display.html?id=121906>
[perl #121969] <https://rt.perl.org/Ticket/Display.html?id=121969>
.IP "\(bu" 4
\&\f(CW\*(C`\-T\*(C'\fR and \f(CW\*(C`\-B\*(C'\fR filetests will return sooner when an empty file is detected.
.Sp
perl #121489 <https://rt.perl.org/Ticket/Display.html?id=121489>
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
The libnet collection of modules has been upgraded from version 1.25 to 1.27.
.Sp
There are only whitespace changes to the installed files.
.IP "\(bu" 4
A mismatch between the documentation and the code in \fIutf8::downgrade()\fR
was fixed in favour of the documentation. The optional second argument
is now correctly treated as a perl boolean (true/false semantics) and
not as an integer.
.IP "\(bu" 4
The Locale-Codes collection of modules has been upgraded from version 3.30 to 3.31.
.Sp
Fixed a bug in the scripts used to extract data from spreadsheets that
prevented the \s-1SHP\s0 currency code from being found.
[cpan #94229] <https://rt.cpan.org/Ticket/Display.html?id=94229>
.IP "\(bu" 4
Archive::Tar has been upgraded from version 1.96 to 2.00.
.IP "\(bu" 4
autodie has been upgraded from version 2.23 to 2.25.
.IP "\(bu" 4
B has been upgraded from version 1.48 to 1.49.
.IP "\(bu" 4
B::Deparse has been upgraded from version 1.26 to 1.27.
.IP "\(bu" 4
Benchmark has been upgraded from version 1.18 to 1.19.
.IP "\(bu" 4
Carp has been upgraded from version 1.3301 to 1.34.
.Sp
Carp::Heavy now ignores version mismatches with Carp if Carp is newer
than 1.12, since Carp::Heavy's guts were merged into Carp at that
point.
[perl #121574] <https://rt.perl.org/Ticket/Display.html?id=121574>
.IP "\(bu" 4
charnames has been upgraded from version 1.40 to 1.41.
.IP "\(bu" 4
CPAN::Meta has been upgraded from version 2.140640 to 2.141520.
.IP "\(bu" 4
Data::Dumper has been upgraded from version 2.151 to 2.152.
.Sp
Changes to resolve Coverity issues.
.Sp
\&\s-1XS\s0 dumps incorrectly stored the name of code references stored in a
\&\s-1GLOB.
\&\s0[perl #122070] <https://rt.perl.org/Ticket/Display.html?id=122070>
.IP "\(bu" 4
Devel::Peek has been upgraded from version 1.16 to 1.17.
.IP "\(bu" 4
Devel::PPPort has been upgraded from version 3.21 to 3.24.
.IP "\(bu" 4
Digest::SHA has been upgraded from version 5.88 to 5.92.
.IP "\(bu" 4
DynaLoader has been upgraded from version 1.25 to 1.26.
.IP "\(bu" 4
Encode has been upgraded from version 2.60 to 2.62.
.Sp
\&\fBpiconv\fR now has better error handling when the encoding name is nonexistent,
and a build breakage when upgrading Encode in perl\-5.8.2 and earlier has
been fixed.
.IP "\(bu" 4
Errno has been upgraded from version 1.20_03 to 1.20_04.
.IP "\(bu" 4
Exporter has been upgraded from version 5.70 to 5.71.
.IP "\(bu" 4
ExtUtils::Install has been upgraded from version 1.67 to 1.68.
.IP "\(bu" 4
ExtUtils::Miniperl has been upgraded from version 1.01 to 1.02.
.IP "\(bu" 4
ExtUtils::ParseXS has been upgraded from version 3.24 to 3.25.
.IP "\(bu" 4
ExtUtils::Typemaps has been upgraded from version 3.24 to 3.25.
.IP "\(bu" 4
File::Spec has been upgraded from version 3.47 to 3.48.
.IP "\(bu" 4
Hash::Util has been upgraded from version 0.16 to 0.17.
.Sp
Minor bug fixes and documentation fixes to \fIHash::Util::hash_stats()\fR
.IP "\(bu" 4
\&\s-1IO\s0 has been upgraded from version 1.31 to 1.32.
.IP "\(bu" 4
List::Util has been upgraded from version 1.38 to 1.39.
.IP "\(bu" 4
locale has been upgraded from version 1.03 to 1.04.
.IP "\(bu" 4
Locale::Codes has been upgraded from version 3.30 to 3.31.
.IP "\(bu" 4
Math::BigInt has been upgraded from version 1.9993 to 1.9995.
.Sp
Synchronize \s-1POD\s0 changes from the \s-1CPAN\s0 release.
.Sp
\&\f(CW\*(C`Math::BigFloat\->blog(x)\*(C'\fR would sometimes return blog(2*x) when
the accuracy was greater than 70 digits.
.Sp
The result of \f(CW\*(C`Math::BigFloat\->bdiv()\*(C'\fR in list context now
satisfies \f(CW\*(C`x = quotient * divisor + remainder\*(C'\fR.
.IP "\(bu" 4
Math::BigRat has been upgraded from version 0.2606 to 0.2608.
.Sp
Synchronize \s-1POD\s0 changes from the \s-1CPAN\s0 release.
.IP "\(bu" 4
Module::CoreList has been upgraded from version 5.021001 to 5.021001_01.
.IP "\(bu" 4
Module::Metadata has been upgraded from version 1.000019 to 1.000024.
.Sp
Support installations on older perls with an ExtUtils::MakeMaker earlier
than 6.63_03
.IP "\(bu" 4
NDBM_File has been upgraded from version 1.12 to 1.13.
.IP "\(bu" 4
OS2::Process has been upgraded from version 1.09 to 1.10.
.IP "\(bu" 4
perl5db.pl has been upgraded from version 1.44 to 1.45.
.Sp
\&\fIfork()\fR in the debugger under \f(CW\*(C`tmux\*(C'\fR will now create a new window for
the forked process. [perl
#121333] <https://rt.perl.org/Ticket/Display.html?id=121333>
.Sp
The debugger now saves the current working directory on startup and
restores it when you restart your program with \f(CW\*(C`R\*(C'\fR or \f(CW\*(C`rerun\*(C'\fR. [perl
#121509] <https://rt.perl.org/Ticket/Display.html?id=121509>
.IP "\(bu" 4
PerlIO::encoding has been upgraded from version 0.18 to 0.19.
.Sp
No changes in behaviour.
.IP "\(bu" 4
PerlIO::mmap has been upgraded from version 0.011 to 0.013.
.Sp
No changes in behaviour.
.IP "\(bu" 4
PerlIO::scalar has been upgraded from version 0.18 to 0.19.
.Sp
No changes in behaviour.
.IP "\(bu" 4
PerlIO::via has been upgraded from version 0.14 to 0.15.
.IP "\(bu" 4
Pod::Html has been upgraded from version 1.21 to 1.22.
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from version 1.38_03 to 1.40.
.IP "\(bu" 4
Scalar::Util has been upgraded from version 1.38 to 1.39.
.IP "\(bu" 4
SelfLoader has been upgraded from version 1.21 to 1.22.
.IP "\(bu" 4
Socket has been upgraded from version 2.013 to 2.014.
.IP "\(bu" 4
Storable has been upgraded from version 2.49 to 2.51.
.IP "\(bu" 4
Term::ANSIColor has been upgraded from version 4.02 to 4.03.
.IP "\(bu" 4
Test::Harness has been upgraded from version 3.30 to 3.32.
.IP "\(bu" 4
Test::Simple has been upgraded from version 1.001002 to 1.001003.
.IP "\(bu" 4
threads has been upgraded from version 1.93 to 1.94.
.IP "\(bu" 4
Tie::File has been upgraded from version 1.00 to 1.01.
.IP "\(bu" 4
Unicode::Collate has been upgraded from version 1.04 to 1.07.
.Sp
Version 0.67's improved discontiguous contractions is invalidated by default
and is supported as a parameter 'long_contraction'.
.IP "\(bu" 4
Unicode::Normalize has been upgraded from version 1.17 to 1.18.
.Sp
The \s-1XSUB\s0 implementation has been removed in favour of pure Perl.
.IP "\(bu" 4
Unicode::UCD has been upgraded from version 0.57 to 0.58.
.IP "\(bu" 4
utf8 has been upgraded from version 1.13 to 1.14.
.IP "\(bu" 4
warnings has been upgraded from version 1.23 to 1.24.
.SH "Documentation"
.IX Header "Documentation"
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlfunc\fR
.IX Subsection "perlfunc"
.IP "\(bu" 4
\&\f(CW\*(C`\-l\*(C'\fR now notes that it will return false if symlinks aren't supported by the 
file system.
.Sp
[perl #121523] <https://rt.perl.org/Ticket/Display.html?id=121523>
.IP "\(bu" 4
Note that \f(CW\*(C`exec LIST\*(C'\fR and \f(CW\*(C`system LIST\*(C'\fR may fall back to the shell on
Win32. Only \f(CW\*(C`exec PROGRAM LIST\*(C'\fR and \f(CW\*(C`system PROGRAM LIST\*(C'\fR indirect object
syntax will reliably avoid using the shell.
.Sp
This has also been noted in perlport.
.Sp
[perl #122046] <https://rt.perl.org/Ticket/Display.html?id=122046>
.PP
\fIperlapi\fR
.IX Subsection "perlapi"
.IP "\(bu" 4
Note that \f(CW\*(C`SvSetSV\*(C'\fR doesn't do set magic.
.IP "\(bu" 4
\&\f(CW\*(C`sv_usepvn_flags\*(C'\fR \- Fix documentation to mention the use of \f(CW\*(C`NewX\*(C'\fR instead of 
\&\f(CW\*(C`malloc\*(C'\fR.
.Sp
[perl #121869] <https://rt.perl.org/Ticket/Display.html?id=121869>
.IP "\(bu" 4
Clarify where \f(CW\*(C`NUL\*(C'\fR may be embedded or is required to terminate a string.
.IP "\(bu" 4
Previously missing documentation due to formatting errors are now included.
.IP "\(bu" 4
Entries are now organized into groups rather than by file where they are found.
.IP "\(bu" 4
Alphabetical sorting of entries is now handled by the \s-1POD\s0 generator to make 
entries easier to find when scanning.
.PP
\fIperlhacktips\fR
.IX Subsection "perlhacktips"
.IP "\(bu" 4
Updated documentation for the \f(CW\*(C`test.valgrind\*(C'\fR \f(CW\*(C`make\*(C'\fR target.
.Sp
[perl #121431] <https://rt.perl.org/Ticket/Display.html?id=121431>
.PP
\fIperlre\fR
.IX Subsection "perlre"
.IP "\(bu" 4
The \f(CW\*(C`/x\*(C'\fR modifier has been clarified to note that comments cannot be continued 
onto the next line by escaping them.
.PP
\fIUnicode::UCD\fR
.IX Subsection "Unicode::UCD"
.IP "\(bu" 4
The documentation includes many clarifications and fixes.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Errors\fR
.IX Subsection "New Errors"
.IP "\(bu" 4
In '(?...)', the '(' and '?' must be adjacent in regex; marked by <\-\-\ \s-1HERE\s0 in m/%s/
.Sp
(F) The two-character sequence \f(CW"(?"\fR in
this context in a regular expression pattern should be an
indivisible token, with nothing intervening between the \f(CW"("\fR
and the \f(CW"?"\fR, but you separated them.
.IP "\(bu" 4
In '(*VERB...)', the '(' and '*' must be adjacent in regex; marked by <\-\-\ \s-1HERE\s0 in m/%s/
.Sp
(F) The two-character sequence \f(CW"(*"\fR in
this context in a regular expression pattern should be an
indivisible token, with nothing intervening between the \f(CW"("\fR
and the \f(CW"*"\fR, but you separated them.
.IP "\(bu" 4
charnames alias definitions may not contain a sequence of multiple spaces
.Sp
(F) You defined a character name which had multiple space
 characters in a row.  Change them to single spaces.  Usually these
 names are defined in the \f(CW\*(C`:alias\*(C'\fR import argument to \f(CW\*(C`use charnames\*(C'\fR, but
 they could be defined by a translator installed into \f(CW$^H{charnames}\fR.
 See \*(L"\s-1CUSTOM ALIASES\*(R"\s0 in charnames.
.IP "\(bu" 4
charnames alias definitions may not contain trailing white-space
.Sp
(F) You defined a character name which ended in a space
character.  Remove the trailing space(s).  Usually these names are
defined in the \f(CW\*(C`:alias\*(C'\fR import argument to \f(CW\*(C`use charnames\*(C'\fR, but they
could be defined by a translator installed into \f(CW$^H{charnames}\fR.
See \*(L"\s-1CUSTOM ALIASES\*(R"\s0 in charnames.
.IP "\(bu" 4
Can't use a hash as a reference
.Sp
(F) You tried to use a hash as a reference, as in
\&\f(CW\*(C`%foo\->{"bar"}\*(C'\fR or \f(CW\*(C`%$ref\->{"hello"}\*(C'\fR.  Versions of perl <= 5.6.1
used to allow this syntax, but shouldn't have.
.IP "\(bu" 4
Can't use an array as a reference
.Sp
(F) You tried to use an array as a reference, as in
\&\f(CW\*(C`@foo\->[23]\*(C'\fR or \f(CW\*(C`@$ref\->[99]\*(C'\fR.  Versions of perl <= 5.6.1 used to
allow this syntax, but shouldn't have.
.IP "\(bu" 4
Can't use 'defined(@array)' (Maybe you should just omit the \fIdefined()\fR?)
.Sp
(F) \fIdefined()\fR is not useful on arrays because it
checks for an undefined \fIscalar\fR value.  If you want to see if the
array is empty, just use \f(CW\*(C`if (@array) { # not empty }\*(C'\fR for example.
.IP "\(bu" 4
Can't use 'defined(%hash)' (Maybe you should just omit the \fIdefined()\fR?)
.Sp
(F) \f(CW\*(C`defined()\*(C'\fR is not usually right on hashes.
.Sp
Although \f(CW\*(C`defined %hash\*(C'\fR is false on a plain not-yet-used hash, it
becomes true in several non-obvious circumstances, including iterators,
weak references, stash names, even remaining true after \f(CW\*(C`undef %hash\*(C'\fR.
These things make \f(CW\*(C`defined %hash\*(C'\fR fairly useless in practice, so it now
generates a fatal error.
.Sp
If a check for non-empty is what you wanted then just put it in boolean
context (see \*(L"Scalar values\*(R" in perldata):
.Sp
.Vb 3
\&    if (%hash) {
\&       # not empty
\&    }
.Ve
.Sp
If you had \f(CW\*(C`defined %Foo::Bar::QUUX\*(C'\fR to check whether such a package
variable exists then that's never really been reliable, and isn't
a good way to enquire about the features of a package, or whether
it's loaded, etc.
.IP "\(bu" 4
Illegal suidscript
.Sp
(F) The script run under suidperl was somehow illegal.
.PP
\fINew Warnings\fR
.IX Subsection "New Warnings"
.IP "\(bu" 4
Unescaped left brace in regex is deprecated, passed through in regex; marked by <\-\- \s-1HERE\s0 in m/%s/
.Sp
(D deprecated, regexp) You used a literal \f(CW"{"\fR character in a regular
expression pattern. You should change to use \f(CW"\e{"\fR instead, because a future
version of Perl (tentatively v5.26) will consider this to be a syntax error.  If
the pattern delimiters are also braces, any matching right brace
(\f(CW"}"\fR) should also be escaped to avoid confusing the parser, for
example,
.Sp
.Vb 1
\&    qr{abc\e{def\e}ghi}
.Ve
.IP "\(bu" 4
NO-BREAK \s-1SPACE\s0 in a charnames alias definition is deprecated
.Sp
(D deprecated) You defined a character name which contained a no-break
space character.  Change it to a regular space.  Usually these names are
defined in the \f(CW\*(C`:alias\*(C'\fR import argument to \f(CW\*(C`use charnames\*(C'\fR, but they
could be defined by a translator installed into \f(CW$^H{charnames}\fR.  See
\&\*(L"\s-1CUSTOM ALIASES\*(R"\s0 in charnames.
.IP "\(bu" 4
PerlIO layer ':win32' is experimental
.Sp
(S experimental::win32_perlio) The \f(CW\*(C`:win32\*(C'\fR PerlIO layer is
experimental.  If you want to take the risk of using this layer,
simply disable this warning:
.Sp
.Vb 1
\&    no warnings "experimental::win32_perlio";
.Ve
.IP "\(bu" 4
Negative repeat count does nothing
.Sp
(W numeric) You tried to execute the
\&\f(CW\*(C`x\*(C'\fR repetition operator fewer than 0
times, which doesn't make sense.
.IP "\(bu" 4
localtime(%f) failed
.Sp
(W overflow) You called \f(CW\*(C`localtime\*(C'\fR with a number that it could not handle:
too large, too small, or NaN.  The returned value is \f(CW\*(C`undef\*(C'\fR.
.IP "\(bu" 4
gmtime(%f) failed
.Sp
(W overflow) You called \f(CW\*(C`gmtime\*(C'\fR with a number that it could not handle:
too large, too small, or NaN.  The returned value is \f(CW\*(C`undef\*(C'\fR.
.IP "\(bu" 4
PerlIO layer ':win32' is experimental:
.Sp
(S experimental::win32_perlio) The \f(CW\*(C`:win32\*(C'\fR PerlIO layer is
experimental.  If you want to take the risk of using this layer,
simply disable this warning:
.Sp
.Vb 1
\&    no warnings "experimental::win32_perlio";
.Ve
.IP "\(bu" 4
Negative repeat count does nothing
.Sp
(W numeric)  This warns when the repeat count of the
\&\f(CW\*(C`x\*(C'\fR repetition operator is
negative.
.Sp
This warning may be changed or removed if it turn out that it was
unwise to have added it.
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP "\(bu" 4
Variable length lookbehind not implemented in regex m/%s/
.Sp
Information about Unicode behaviour has been added.
.IP "\(bu" 4
<> should be quotes
.Sp
This warning has been changed to
<> at require-statement should be quotes
to make the issue more identifiable.
.IP "\(bu" 4
Unsuccessful \f(CW%s\fR on filename containing newline
.Sp
This warning is now only produced when the newline is at the end of
the filename.
.SH "Utility Changes"
.IX Header "Utility Changes"
.SS "\fIx2p/\fP"
.IX Subsection "x2p/"
.IP "\(bu" 4
The \fIx2p/\fR directory has been removed from the Perl core.
.Sp
This removes find2perl, s2p and a2p. They have all been released to \s-1CPAN\s0 as 
separate distributions (App::find2perl, App::s2p, App::a2p).
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
\&\f(CW\*(C`make test.valgrind\*(C'\fR now supports parallel testing.
.Sp
For example:
.Sp
.Vb 1
\&    TEST_JOBS=9 make test.valgrind
.Ve
.Sp
See \*(L"valgrind\*(R" in perlhacktips for more information.
.Sp
[perl #121431] <https://rt.perl.org/Ticket/Display.html?id=121431>
.IP "\(bu" 4
The \s-1MAD \s0(Misc Attribute Decoration) build option has been removed
.Sp
This was an unmaintained attempt at preserving
the Perl parse tree more faithfully so that automatic conversion of
Perl 5 to Perl 6 would have been easier.
.Sp
This build-time configuration option had been unmaintained for years,
and had probably seriously diverged on both Perl 5 and Perl 6 sides.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
.IP "NeXTSTEP/OPENSTEP" 4
.IX Item "NeXTSTEP/OPENSTEP"
NeXTSTEP was proprietary \s-1OS\s0 bundled with NeXT's workstations in the early
to mid 90's; \s-1OPENSTEP\s0 was an \s-1API\s0 specification that provided a NeXTSTEP-like 
environment on a non-NeXTSTEP system.  Both are now long dead, so support
for building Perl on them has been removed.
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "OpenBSD" 4
.IX Item "OpenBSD"
On OpenBSD, Perl will now default to using the system \f(CW\*(C`malloc\*(C'\fR due to the
security features it provides. Perl's own malloc wrapper has been in use
since v5.14 due to performance reasons, but the OpenBSD project believes
the tradeoff is worth it and would prefer that users who need the speed
specifically ask for it.
.Sp
[perl #122000] <https://rt.perl.org/Ticket/Display.html?id=122000>.
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP "\(bu" 4
The deprecated variable \f(CW\*(C`PL_sv_objcount\*(C'\fR has been removed.
.IP "\(bu" 4
Perl now tries to keep the locale category \f(CW\*(C`LC_NUMERIC\*(C'\fR set to \*(L"C\*(R"
except around operations that need it to be set to the program's
underlying locale.  This protects the many \s-1XS\s0 modules that cannot cope
with the decimal radix character not being a dot.  Prior to this
release, Perl initialized this category to \*(L"C\*(R", but a call to
\&\f(CW\*(C`POSIX::setlocale()\*(C'\fR would change it.  Now such a call will change the
underlying locale of the \f(CW\*(C`LC_NUMERIC\*(C'\fR category for the program, but the
locale exposed to \s-1XS\s0 code will remain \*(L"C\*(R".  There is an \s-1API\s0 under
development for those relatively few modules that need to use the
underlying locale.  This \s-1API\s0 will be nailed down during the course of
developing v5.21.  Send email to <mailto:perl5\-porters@perl.org> for
guidance.
.IP "\(bu" 4
A new macro \f(CW\*(C`isUTF8_CHAR\*(C'\fR has been written which
efficiently determines if the string given by its parameters begins
with a well-formed \s-1UTF\-8\s0 encoded character.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
\&\fIindex()\fR and \fIrindex()\fR no longer crash when used on strings over 2GB in
size.
[perl #121562] <https://rt.perl.org/Ticket/Display.html?id=121562>.
.IP "\(bu" 4
A small previously intentional memory leak in \s-1PERL_SYS_INIT/PERL_SYS_INIT3\s0 on
Win32 builds was fixed. This might affect embedders who repeatedly create and
destroy perl engines within the same process.
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::localeconv()\*(C'\fR now returns the data for the program's underlying
locale even when called from outside the scope of \f(CW\*(C`use\ locale\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::localeconv()\*(C'\fR now works properly on platforms which don't have
\&\f(CW\*(C`LC_NUMERIC\*(C'\fR and/or \f(CW\*(C`LC_MONETARY\*(C'\fR, or for which Perl has been compiled
to disregard either or both of these locale categories.  In such
circumstances, there are now no entries for the corresponding values in
the hash returned by \f(CW\*(C`localeconv()\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::localeconv()\*(C'\fR now marks appropriately the values it returns as
\&\s-1UTF\-8\s0 or not.  Previously they were always returned as a bytes, even if
they were supposed to be encoded as \s-1UTF\-8.\s0
.IP "\(bu" 4
On Microsoft Windows, within the scope of \f(CW\*(C`use\ locale\*(C'\fR, the following
\&\s-1POSIX\s0 character classes gave results for many locales that did not
conform to the \s-1POSIX\s0 standard:
\&\f(CW\*(C`[[:alnum:]]\*(C'\fR,
\&\f(CW\*(C`[[:alpha:]]\*(C'\fR,
\&\f(CW\*(C`[[:blank:]]\*(C'\fR,
\&\f(CW\*(C`[[:digit:]]\*(C'\fR,
\&\f(CW\*(C`[[:graph:]]\*(C'\fR,
\&\f(CW\*(C`[[:lower:]]\*(C'\fR,
\&\f(CW\*(C`[[:print:]]\*(C'\fR,
\&\f(CW\*(C`[[:punct:]]\*(C'\fR,
\&\f(CW\*(C`[[:upper:]]\*(C'\fR,
\&\f(CW\*(C`[[:word:]]\*(C'\fR,
and
\&\f(CW\*(C`[[:xdigit:]]\*(C'\fR.
These are because the underlying Microsoft implementation does not
follow the standard.  Perl now takes special precautions to correct for
this.
.IP "\(bu" 4
Many issues have been detected by Coverity <http://www.coverity.com/> and 
fixed.
.IP "\(bu" 4
\&\fIsystem()\fR and friends should now work properly on more Android builds.
.Sp
Due to an oversight, the value specified through \-Dtargetsh to Configure
would end up being ignored by some of the build process.  This caused perls
cross-compiled for Android to end up with defective versions of \fIsystem()\fR,
\&\fIexec()\fR and backticks: the commands would end up looking for \f(CW\*(C`/bin/sh\*(C'\fR
instead of \f(CW\*(C`/system/bin/sh\*(C'\fR, and so would fail for the vast majority
of devices, leaving \f(CW$!\fR as \f(CW\*(C`ENOENT\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`qr(...\e(...\e)...)\*(C'\fR,
\&\f(CW\*(C`qr[...\e[...\e]...]\*(C'\fR,
and
\&\f(CW\*(C`qr{...\e{...\e}...}\*(C'\fR
now work.  Previously it was impossible to escape these three
left-characters with a backslash within a regular expression pattern
where otherwise they would be considered metacharacters, and the pattern
opening delimiter was the character, and the closing delimiter was its
mirror character.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.21.1 represents approximately 3 weeks of development since Perl 5.21.0
and contains approximately 240,000 lines of changes across 680 files from 37
authors.
.PP
Excluding auto-generated files, documentation and release tools, there were
approximately 150,000 lines of changes to 420 .pm, .t, .c and .h files.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.21.1:
.PP
Alex Solovey, Andrew Fresh, Andy Dougherty, Brian Fraser, Chris 'BinGOs'
Williams, Craig A. Berry, Dagfinn Ilmari Mannsa\*oker, Daniel Dragan, Darin
McBride, David Mitchell, Doug Bell, H.Merijn Brand, James E Keenan, Jarkko
Hietaniemi, kafka, Karen Etheridge, Karl Williamson, Leon Timmermans, Matthew
Horsfall, Michael Bunk, Nicholas Clark, Niels Thykier, Norman Koch, Peter John
Acklam, Pierre Bogossian, Reini Urban, Ricardo Signes, Rob Hoelz, Shlomi Fish,
Smylers, Steffen Mu\*:ller, Steve Hay, Sullivan Beck, Thomas Sibley, Todd
Rinaldo, Tony Cook, Yves Orton.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0 modules
included in Perl's core. We're grateful to the entire \s-1CPAN\s0 community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of \f(CW\*(C`perl \-V\*(C'\fR,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5\-security\-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
\&\s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details on
what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
