.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5214DELTA 1"
.TH PERL5214DELTA 1 "2015-05-13" "perl v5.22.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5214delta \- what is new for perl v5.21.4
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.21.3 release and the 5.21.4
release.
.PP
If you are upgrading from an earlier release such as 5.21.2, first read
perl5213delta, which describes differences between 5.21.2 and 5.21.3.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Infinity and NaN (not-a-number) handling improved"
.IX Subsection "Infinity and NaN (not-a-number) handling improved"
Floating point values are able to hold the special values infinity (also
\&\-infinity), and NaN (not-a-number).  Now we more robustly recognize and
propagate the value in computations, and on output normalize them to \f(CW\*(C`Inf\*(C'\fR and
\&\f(CW\*(C`NaN\*(C'\fR.
.PP
See also the \s-1POSIX\s0 enhancements.
.SH "Security"
.IX Header "Security"
.SS "Perl is now compiled with \-fstack\-protector\-strong if available"
.IX Subsection "Perl is now compiled with -fstack-protector-strong if available"
Perl has been compiled with the anti-stack-smashing option
\&\f(CW\*(C`\-fstack\-protector\*(C'\fR since 5.10.1.  Now Perl uses the newer variant
called \f(CW\*(C`\-fstack\-protector\-strong\*(C'\fR, if available.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.ie n .SS "Changes to the ""*"" prototype"
.el .SS "Changes to the \f(CW*\fP prototype"
.IX Subsection "Changes to the * prototype"
The \f(CW\*(C`*\*(C'\fR character in a subroutine's prototype used to allow barewords to take
precedence over most, but not all subroutines.  It was never consistent and
exhibited buggy behaviour.
.PP
Now it has been changed, so subroutines always take precedence over barewords,
which brings it into conformity with similarly prototyped built-in functions:
.PP
.Vb 6
\&    sub splat(*) { ... }
\&    sub foo { ... }
\&    splat(foo); # now always splat(foo())
\&    splat(bar); # still splat(\*(Aqbar\*(Aq) as before
\&    close(foo); # close(foo())
\&    close(bar); # close(\*(Aqbar\*(Aq)
.Ve
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
Subroutines with an empty prototype and bodies containing just \f(CW\*(C`undef\*(C'\fR are now
eligible for inlining.
[perl #122728] <https://rt.perl.org/Ticket/Display.html?id=122728>
.IP "\(bu" 4
Subroutines in packages no longer need to carry typeglobs around with them.
Declaring a subroutine will now put a simple sub reference in the stash if
possible, saving memory.  The typeglobs still notionally exist, so accessing
them will cause the subroutine reference to be upgraded to a typeglob.  This
optimization does not currently apply to XSUBs or exported subroutines, and
method calls will undo it, since they cache things in typeglobs.
[perl #120441] <https://rt.perl.org/Ticket/Display.html?id=120441>
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.IP "\(bu" 4
B::Op_private provides detailed information about the flags used in the
\&\f(CW\*(C`op_private\*(C'\fR field of perl opcodes.
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
Archive::Tar has been upgraded from version 2.00 to 2.02.
.Sp
Tests can now be run in parallel.
.IP "\(bu" 4
Attribute::Handlers has been upgraded from version 0.96 to 0.97.
.Sp
Internal changes to account for the fact that subroutines in packages no longer
need to carry typeglobs around with them (see under \*(L"Performance
Enhancements\*(R").
.IP "\(bu" 4
attributes has been upgraded from version 0.22 to 0.23.
.Sp
The usage of \f(CW\*(C`memEQs\*(C'\fR in the \s-1XS\s0 has been corrected.
[perl #122701] <https://rt.perl.org/Ticket/Display.html?id=122701>
.IP "\(bu" 4
B has been upgraded from version 1.50 to 1.51.
.Sp
It provides a new \f(CW\*(C`B::safename\*(C'\fR function, based on the existing
\&\f(CW\*(C`B::GV\->SAFENAME\*(C'\fR, that converts \*(L"\ecOPEN\*(R" to \*(L"^OPEN\*(R".
.IP "\(bu" 4
B::Concise has been upgraded from version 0.992 to 0.993.
.Sp
Internal changes to account for the fact that the defines and labels for the
flags in the \f(CW\*(C`op_private\*(C'\fR field of OPs are now auto-generated (see under
\&\*(L"Internal Changes\*(R").
.IP "\(bu" 4
B::Deparse has been upgraded from version 1.27 to 1.28.
.Sp
It now deparses \f(CW\*(C`our(\f(CILIST\f(CW)\*(C'\fR and typed lexical (\f(CW\*(C`my Dog $spot\*(C'\fR) correctly.
.IP "\(bu" 4
bignum has been upgraded from version 0.37 to 0.38.
.Sp
An \f(CW\*(C`eval BLOCK\*(C'\fR rather than an \f(CW\*(C`eval EXPR\*(C'\fR is now used to see if we can find
Math::BigInt::Lite.
.IP "\(bu" 4
constant has been upgraded from version 1.31 to 1.32.
.Sp
It now accepts fully-qualified constant names, allowing constants to be defined
in packages other than the caller.
.IP "\(bu" 4
CPAN::Meta::Requirements has been upgraded from version 2.126 to 2.128.
.Sp
Works around limitations in version::vpp detecting v\-string magic and adds
support for forthcoming ExtUtils::MakeMaker bootstrap \fIversion.pm\fR for
Perls older than 5.10.0.
.IP "\(bu" 4
Data::Dumper has been upgraded from version 2.152 to 2.154.
.Sp
Fixes \s-1CVE\-2014\-4330\s0 by adding a configuration variable/option to limit
recursion when dumping deep data structures.
.IP "\(bu" 4
experimental has been upgraded from version 0.008 to 0.010.
.Sp
Hardcodes features for Perls older than 5.15.7.
.IP "\(bu" 4
ExtUtils::CBuilder has been upgraded from version 0.280217 to 0.280219.
.Sp
Fixes a regression on Android.
[perl #122675] <https://rt.perl.org/Ticket/Display.html?id=122675>
.IP "\(bu" 4
ExtUtils::Install has been upgraded from version 1.68 to 2.04.
.Sp
No changes to installed files other than version bumps.
.IP "\(bu" 4
ExtUtils::Manifest has been upgraded from version 1.65 to 1.68.
.Sp
Fixes a bug with \f(CW\*(C`maniread()\*(C'\fR's handling of quoted filenames and improves
\&\f(CW\*(C`manifind()\*(C'\fR to follow symlinks.
[perl #122415] <https://rt.perl.org/Ticket/Display.html?id=122415>
.IP "\(bu" 4
File::Find has been upgraded from version 1.27 to 1.28.
.Sp
\&\f(CW\*(C`find()\*(C'\fR and \f(CW\*(C`finddepth()\*(C'\fR will now warn if passed inappropriate or
misspelled options.
.IP "\(bu" 4
Getopt::Std has been upgraded from version 1.10 to 1.11.
.Sp
Corrects a typo in the documentation.
.IP "\(bu" 4
HTTP::Tiny has been upgraded from version 0.047 to 0.049.
.Sp
\&\f(CW\*(C`keep_alive\*(C'\fR is now fork-safe and thread-safe.
.IP "\(bu" 4
\&\s-1IO\s0 has been upgraded from version 1.33 to 1.34.
.Sp
The \s-1XS\s0 implementation has been fixed for the sake of older Perls.
.IP "\(bu" 4
IO::Socket::IP has been upgraded from version 0.31 to 0.32.
.Sp
Implements Timeout for \f(CW\*(C`connect()\*(C'\fR.
[cpan #92075] <https://rt.cpan.org/Ticket/Display.html?id=92075>
.IP "\(bu" 4
Locale::Codes has been upgraded from version 3.31 to 3.32.
.Sp
New codes have been added.
.IP "\(bu" 4
Math::BigInt has been upgraded from version 1.9996 to 1.9997.
.Sp
The documentation now gives test examples using Test::More rather than
Test.
.IP "\(bu" 4
Module::CoreList has been upgraded from version 5.021003 to 5.20140920.
.Sp
Updated to cover the latest releases of Perl.
.IP "\(bu" 4
overload has been upgraded from version 1.22 to 1.23.
.Sp
A redundant \f(CW\*(C`ref $sub\*(C'\fR check has been removed.
.IP "\(bu" 4
PathTools has been upgraded from version 3.49 to 3.50.
.Sp
A warning from the \fBgcc\fR compiler is now avoided when building the \s-1XS.\s0
.IP "\(bu" 4
Pod::Perldoc has been upgraded from version 3.23 to 3.24.
.Sp
Filehandles opened for reading or writing now have \f(CW\*(C`:encoding(UTF\-8)\*(C'\fR set.
[cpan #98019] <https://rt.cpan.org/Ticket/Display.html?id=98019>
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from version 1.42 to 1.43.
.Sp
The C99 math functions and constants (for example acosh, isinf, isnan, round,
trunc; M_E, M_SQRT2, M_PI) have been added.
.IP "\(bu" 4
Scalar-List-Utils has been upgraded from version 1.39 to 1.41.
.Sp
A new module, Sub::Util, has been added, containing functions related to
\&\s-1CODE\s0 refs, including \f(CW\*(C`subname\*(C'\fR (inspired by Sub::Identity) and \f(CW\*(C`set_subname\*(C'\fR
(copied and renamed from Sub::Name).
.Sp
The use of \f(CW\*(C`GetMagic\*(C'\fR in \f(CW\*(C`List::Util::reduce()\*(C'\fR has also been fixed.
[cpan #63211] <https://rt.cpan.org/Ticket/Display.html?id=63211>
.IP "\(bu" 4
Term::ReadLine has been upgraded from version 1.14 to 1.15.
.Sp
Faster checks are now made first in some if-statements.
.IP "\(bu" 4
Test::Harness has been upgraded from version 3.32 to 3.33.
.Sp
Various documentation fixes.
.IP "\(bu" 4
Test::Simple has been upgraded from version 1.001003 to 1.001006.
.Sp
Various documentation fixes.
.IP "\(bu" 4
threads has been upgraded from version 1.95 to 1.96.
.Sp
No changes to installed files other than version bumps.
.IP "\(bu" 4
Time::Piece has been upgraded from version 1.27 to 1.29.
.Sp
When pretty printing negative Time::Seconds, the \*(L"minus\*(R" is no longer lost.
.IP "\(bu" 4
version has been upgraded from version 0.9908 to 0.9909.
.Sp
Numerous changes.  See the \fIChanges\fR file in the \s-1CPAN\s0 distribution for
details.
.SH "Documentation"
.IX Header "Documentation"
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlfunc\fR
.IX Subsection "perlfunc"
.IP "\(bu" 4
Calling \f(CW\*(C`delete\*(C'\fR or \f(CW\*(C`exists\*(C'\fR on array values is now described as \*(L"strongly
discouraged\*(R" rather than \*(L"deprecated\*(R".
.PP
\fIperlpolicy\fR
.IX Subsection "perlpolicy"
.IP "\(bu" 4
The conditions for marking an experimental feature as non-experimental are now
set out.
.PP
\fIperlrecharclass\fR
.IX Subsection "perlrecharclass"
.IP "\(bu" 4
The documentation of Bracketed Character Classes has been expanded to cover the
improvements in \f(CW\*(C`qr/[\eN{named sequence}]/\*(C'\fR (see under \*(L"Selected Bug Fixes\*(R").
.PP
\fIperlsyn\fR
.IX Subsection "perlsyn"
.IP "\(bu" 4
An ambiguity in the documentation of the Ellipsis statement has been corrected.
[perl #122661] <https://rt.perl.org/Ticket/Display.html?id=122661>
.PP
\fIperlxs\fR
.IX Subsection "perlxs"
.IP "\(bu" 4
Added a discussion of locale issues in \s-1XS\s0 code.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Warnings\fR
.IX Subsection "New Warnings"
.IP "\(bu" 4
Character in 'C' format overflow in pack
.Sp
(W pack) You tried converting an infinity or not-a-number to an unsigned
character, which makes no sense.  Perl behaved as if you tried to pack 0xFF.
.IP "\(bu" 4
Character in 'c' format overflow in pack
.Sp
(W pack) You tried converting an infinity or not-a-number to a signed
character, which makes no sense.  Perl behaved as if you tried to pack 0xFF.
.IP "\(bu" 4
Invalid number (%f) in chr
.Sp
(W utf8) You passed an invalid number (like an infinity or not-a-number) to
\&\f(CW\*(C`chr\*(C'\fR.  Those are not valid character numbers, so it returned the Unicode
replacement character (U+FFFD).
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP "\(bu" 4
Global symbol \*(L"%s\*(R" requires explicit package name
.Sp
This message has had '(did you forget to declare \*(L"my \f(CW%s\fR\*(R"?)' appended to it, to
make it more helpful to new Perl programmers.
[perl #121638] <https://rt.perl.org/Ticket/Display.html?id=121638>
.IP "\(bu" 4
\&\eN{} in character class restricted to one character in regex; marked by <\-\-\ \s-1HERE\s0 in m/%s/
.Sp
This message has had 'character class' changed to 'inverted character class or
as a range end-point is' to reflect improvements in \f(CW\*(C`qr/[\eN{named sequence}]/\*(C'\fR
(see under \*(L"Selected Bug Fixes\*(R").
.IP "\(bu" 4
panic: frexp
.Sp
This message has had ': \f(CW%f\fR' appended to it, to show what the offending floating
point number is.
.SS "Diagnostic Removals"
.IX Subsection "Diagnostic Removals"
.IP "\(bu" 4
\&\*(L"Constant is not a \s-1FOO\s0 reference\*(R"
.Sp
Compile-time checking of constant dereferencing (e.g., \f(CW\*(C`my_constant\->()\*(C'\fR)
has been removed, since it was not taking overloading into account.
[perl #69456] <https://rt.perl.org/Ticket/Display.html?id=69456>
[perl #122607] <https://rt.perl.org/Ticket/Display.html?id=122607>
.IP "\(bu" 4
\&\*(L"Ambiguous use of \-foo resolved as \-&\fIfoo()\fR\*(R"
.Sp
There is actually no ambiguity here, and this impedes the use of negated
constants; e.g., \f(CW\*(C`\-Inf\*(C'\fR.
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
For long doubles (to get more precision and range for floating point numbers)
one can now use the \s-1GCC\s0 quadmath library which implements the quadruple
precision floating point numbers in x86 and ia64 platforms.  See \fI\s-1INSTALL\s0\fR for
details.
.SH "Testing"
.IX Header "Testing"
.IP "\(bu" 4
A new test script, \fIop/infnan.t\fR, has been added to test if Inf and NaN are
working correctly.  See \*(L"Infinity and NaN (not-a-number) handling improved\*(R".
.IP "\(bu" 4
A new test script, \fIre/rt122747.t\fR, has been added to test that the fix for
perl #122747 <https://rt.perl.org/Ticket/Display.html?id=122747> is working.
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP "\(bu" 4
\&\f(CW\*(C`save_re_context\*(C'\fR no longer does anything and has been moved to \fImathoms.c\fR.
.IP "\(bu" 4
\&\f(CW\*(C`cv_name\*(C'\fR is a new \s-1API\s0 function that can be passed a \s-1CV\s0 or \s-1GV. \s0 It returns an
\&\s-1SV\s0 containing the name of the subroutine for use in diagnostics.
[perl #116735] <https://rt.perl.org/Ticket/Display.html?id=116735>
[perl #120441] <https://rt.perl.org/Ticket/Display.html?id=120441>
.IP "\(bu" 4
\&\f(CW\*(C`cv_set_call_checker_flags\*(C'\fR is a new \s-1API\s0 function that works like
\&\f(CW\*(C`cv_set_call_checker\*(C'\fR, except that it allows the caller to specify whether the
call checker requires a full \s-1GV\s0 for reporting the subroutine's name, or whether
it could be passed a \s-1CV\s0 instead.  Whatever value is passed will be acceptable
to \f(CW\*(C`cv_name\*(C'\fR.  \f(CW\*(C`cv_set_call_checker\*(C'\fR guarantees there will be a \s-1GV,\s0 but it
may have to create one on the fly, which is inefficient.
[perl #116735] <https://rt.perl.org/Ticket/Display.html?id=116735>
.IP "\(bu" 4
\&\f(CW\*(C`CvGV\*(C'\fR (which is not part of the \s-1API\s0) is now a more complex macro, which may
call a function and reify a \s-1GV. \s0 For those cases where is has been used as a
boolean, \f(CW\*(C`CvHASGV\*(C'\fR has been added, which will return true for CVs that
notionally have GVs, but without reifying the \s-1GV.  \s0\f(CW\*(C`CvGV\*(C'\fR also returns a \s-1GV\s0
now for lexical subs.
[perl #120441] <https://rt.perl.org/Ticket/Display.html?id=120441>
.IP "\(bu" 4
Added \*(L"sync_locale\*(R" in perlapi.  Changing the program's locale should be avoided
by \s-1XS\s0 code.  Nevertheless, certain non-Perl libraries called from \s-1XS,\s0 such as
\&\f(CW\*(C`Gtk\*(C'\fR do so.  When this happens, Perl needs to be told that the locale has
changed.  Use this function to do so, before returning to Perl.
.IP "\(bu" 4
The defines and labels for the flags in the \f(CW\*(C`op_private\*(C'\fR field of OPs are now
auto-generated from data in \fIregen/op_private\fR.  The noticeable effect of this
is that some of the flag output of \f(CW\*(C`Concise\*(C'\fR might differ slightly, and the
flag output of \f(CW\*(C`perl \-Dx\*(C'\fR may differ considerably (they both use the same set
of labels now).  Also in debugging builds, there is a new assert in
\&\f(CW\*(C`op_free()\*(C'\fR that checks that the op doesn't have any unrecognized flags set in
\&\f(CW\*(C`op_private\*(C'\fR.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
Constant dereferencing now works correctly for typeglob constants.  Previously
the glob was stringified and its name looked up.  Now the glob itself is used.
[perl #69456] <https://rt.perl.org/Ticket/Display.html?id=69456>
.IP "\(bu" 4
When parsing a funny character ($ @ % &) followed by braces, the parser no
longer tries to guess whether it is a block or a hash constructor (causing a
syntax error when it guesses the latter), since it can only be a block.
.IP "\(bu" 4
\&\f(CW\*(C`undef $reference\*(C'\fR now frees the referent immediately, instead of hanging on
to it until the next statement.
[perl #122556] <https://rt.perl.org/Ticket/Display.html?id=122556>
.IP "\(bu" 4
Various cases where the name of a sub is used (autoload, overloading, error
messages) used to crash for lexical subs, but have been fixed.
.IP "\(bu" 4
Bareword lookup now tries to avoid vivifying packages if it turns out the
bareword is not going to be a subroutine name.
.IP "\(bu" 4
Compilation of anonymous constants (e.g., \f(CW\*(C`sub () { 3 }\*(C'\fR) no longer deletes
any subroutine named \f(CW\*(C`_\|_ANON_\|_\*(C'\fR in the current package.  Not only was
\&\f(CW\*(C`*_\|_ANON_\|_{CODE}\*(C'\fR cleared, but there was a memory leak, too.  This bug goes
back to Perl 5.8.0.
.IP "\(bu" 4
Stub declarations like \f(CW\*(C`sub f;\*(C'\fR and \f(CW\*(C`sub f ();\*(C'\fR no longer wipe out constants
of the same name declared by \f(CW\*(C`use constant\*(C'\fR.  This bug was introduced in Perl
5.10.0.
.IP "\(bu" 4
Under some conditions a warning raised in compilation of regular expression
patterns could be displayed multiple times.  This is now fixed.
.IP "\(bu" 4
\&\f(CW\*(C`qr/[\eN{named sequence}]/\*(C'\fR now works properly in many instances.  Some names
known to \f(CW\*(C`\eN{...}\*(C'\fR refer to a sequence of multiple characters, instead of the
usual single character.  Bracketed character classes generally only match
single characters, but now special handling has been added so that they can
match named sequences, but not if the class is inverted or the sequence is
specified as the beginning or end of a range.  In these cases, the only
behavior change from before is a slight rewording of the fatal error message
given when this class is part of a \f(CW\*(C`?[...])\*(C'\fR construct.  When the \f(CW\*(C`[...]\*(C'\fR
stands alone, the same non-fatal warning as before is raised, and only the
first character in the sequence is used, again just as before.
.IP "\(bu" 4
Tainted constants evaluated at compile time no longer cause unrelated
statements to become tainted.
[perl #122669] <https://rt.perl.org/Ticket/Display.html?id=122669>
.IP "\(bu" 4
\&\f(CW\*(C`open $$fh, ...\*(C'\fR, which vivifies a handle with a name like \*(L"main::_GEN_0\*(R", was
not giving the handle the right reference count, so a double free could happen.
.IP "\(bu" 4
When deciding that a bareword was a method name, the parser would get confused
if an \*(L"our\*(R" sub with the same name existed, and look up the method in the
package of the \*(L"our\*(R" sub, instead of the package of the invocant.
.IP "\(bu" 4
The parser no longer gets confused by \f(CW\*(C`\eU=\*(C'\fR within a double-quoted string.  It
used to produce a syntax error, but now compiles it correctly.
[perl #80368] <https://rt.perl.org/Ticket/Display.html?id=80368>
.IP "\(bu" 4
It has always been the intention for the \f(CW\*(C`\-B\*(C'\fR and \f(CW\*(C`\-T\*(C'\fR file test operators to
treat \s-1UTF\-8\s0 encoded files as text.  (perlfunc has
been updated to say this.)  Previously, it was possible for some files to be
considered \s-1UTF\-8\s0 that actually weren't valid \s-1UTF\-8. \s0 This is now fixed.  The
operators now work on \s-1EBCDIC\s0 platforms as well.
.IP "\(bu" 4
Under some conditions warning messages raised during regular expression pattern
compilation were being output more than once.  This has now been fixed.
.IP "\(bu" 4
A regression has been fixed that was introduced in Perl 5.20.0 (fixed in Perl
5.20.1 as well as here) in which a \s-1UTF\-8\s0 encoded regular expression pattern
that contains a single \s-1ASCII\s0 lowercase letter does not match its uppercase
counterpart.
[perl #122655] <https://rt.perl.org/Ticket/Display.html?id=122655>
.IP "\(bu" 4
Constant folding could incorrectly suppress warnings if lexical warnings (\f(CW\*(C`use
warnings\*(C'\fR or \f(CW\*(C`no warnings\*(C'\fR) were not in effect and \f(CW$^W\fR were false at
compile time and true at run time.
.IP "\(bu" 4
Loading \s-1UTF8\s0 tables during a regular expression match could cause assertion
failures under debugging builds if the previous match used the very same
regular expression.
[perl #122747] <https://rt.perl.org/Ticket/Display.html?id=122747>
.IP "\(bu" 4
Thread cloning used to work incorrectly for lexical subs, possibly causing
crashes or double frees on exit.
.IP "\(bu" 4
Since Perl 5.14.0, deleting \f(CW$SomePackage::{_\|_ANON_\|_}\fR and then undefining an
anonymous subroutine could corrupt things internally, resulting in
Devel::Peek crashing or B.pm giving nonsensical data.  This has been
fixed.
.IP "\(bu" 4
\&\f(CW\*(C`(caller $n)[3]\*(C'\fR now reports names of lexical subs, instead of treating them
as \*(L"(unknown)\*(R".
.IP "\(bu" 4
\&\f(CW\*(C`sort subname LIST\*(C'\fR now supports lexical subs for the comparison routine.
.IP "\(bu" 4
Aliasing (e.g., via \f(CW\*(C`*x = *y\*(C'\fR) could confuse list assignments that mention the
two names for the same variable on either side, causing wrong values to be
assigned.
[perl #15667] <https://rt.perl.org/Ticket/Display.html?id=15667>
.IP "\(bu" 4
Long here-doc terminators could cause a bad read on short lines of input.  This
has been fixed.  It is doubtful that any crash could have occurred.  This bug
goes back to when here-docs were introduced in Perl 3.000 twenty-five years
ago.
.IP "\(bu" 4
An optimization in \f(CW\*(C`split\*(C'\fR to treat \f(CW\*(C`split/^/\*(C'\fR like \f(CW\*(C`split/^/m\*(C'\fR had the
unfortunate side-effect of also treating \f(CW\*(C`split/\eA/\*(C'\fR like \f(CW\*(C`split/^/m\*(C'\fR, which
it should not.  This has been fixed.  (Note, however, that \f(CW\*(C`split/^x/\*(C'\fR does
not behave like \f(CW\*(C`split/^x/m\*(C'\fR, which is also considered to be a bug and will be
fixed in a future version.)
[perl #122761] <https://rt.perl.org/Ticket/Display.html?id=122761>
.IP "\(bu" 4
The little-known \f(CW\*(C`my Class $var\*(C'\fR syntax (see fields and attributes)
could get confused in the scope of \f(CW\*(C`use utf8\*(C'\fR if \f(CW\*(C`Class\*(C'\fR were a constant
whose value contained Latin\-1 characters.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.21.4 represents approximately 4 weeks of development since Perl 5.21.3
and contains approximately 29,000 lines of changes across 520 files from 30
authors.
.PP
Excluding auto-generated files, documentation and release tools, there were
approximately 15,000 lines of changes to 390 .pm, .t, .c and .h files.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers.  The following people are known to have contributed
the improvements that became Perl 5.21.4:
.PP
Alberto Simo\*~es, Alexandre (Midnite) Jousset, Andy Dougherty, Anthony Heading,
Brian Fraser, Chris 'BinGOs' Williams, Craig A. Berry, Daniel Dragan, David
Mitchell, Doug Bell, Father Chrysostomos, George Greer, H.Merijn Brand, James E
Keenan, Jarkko Hietaniemi, Jerry D. Hedden, Karen Etheridge, Karl Williamson,
Olivier Mengue\*', Peter Martini, Reini Urban, Ricardo Signes, Steffen Mu\*:ller,
Steve Hay, Sullivan Beck, syber, Tadeusz SoXnierz, Tony Cook, Yves Orton,
\&\*(Aevar Arnfjo\*:r\*(d- Bjarmason.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history.  In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0 modules
included in Perl's core.  We're grateful to the entire \s-1CPAN\s0 community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of \f(CW\*(C`perl \-V\*(C'\fR,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5\-security\-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
\&\s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details on
what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
